// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: search.sql

package queries

import (
	"context"
)

const searchGlobal = `-- name: SearchGlobal :many
WITH query AS (SELECT unnest(string_to_array(lower($1), ' ')) AS term)
SELECT id, title, siecles, natures, medias, professions, source, score, COUNT(*) OVER () AS total_count
FROM (
         -- ===============================
         -- 1. Monuments & lieux
         -- ===============================
         SELECT m.id_monument_lieu                           AS id,
                m.titre_monu_lieu                            AS title,
                COALESCE(array_agg(DISTINCT bs.siecle_list) FILTER (WHERE bs.siecle_list IS NOT NULL),
                         '{}')                               AS siecles,
                COALESCE(array_agg(DISTINCT bmn.monu_lieu_nature_type)
                         FILTER (WHERE bmn.monu_lieu_nature_type IS NOT NULL),
                         '{}')                               AS natures,
                COALESCE(
                                jsonb_agg(
                                DISTINCT jsonb_build_object(
                                        'id', tm.id_media,
                                        'titre', tm.titre_media
                                         )
                                         ) FILTER (
                                    WHERE tm.titre_media IS NOT NULL
                                AND tm.titre_media <> ''
                                AND tm.chemin_media IS NOT NULL
                                AND tm.chemin_media <> ''
                                AND jsonb_typeof(tm.chemin_media::jsonb) = 'array'
                                AND EXISTS (SELECT 1
                                            FROM jsonb_array_elements(tm.chemin_media::jsonb) AS elem
                                            WHERE COALESCE(elem ->> 'path', '') <> '')
                                    ),
                                '[]'::jsonb
                )                                            AS medias,
                '{}'::text[]                                 AS professions,
                'monuments_lieux'                            AS source,
                similarity(m.titre_monu_lieu, $1) AS score
         FROM t_monuments_lieux m
                  LEFT JOIN loc_communes c ON c.id_commune = m.id_commune
                  LEFT JOIN loc_departements d ON d.id_departement = c.id_departement
                  LEFT JOIN loc_regions r ON r.id_region = d.id_region
                  LEFT JOIN loc_pays p ON p.id_pays = r.id_pays
                  LEFT JOIN cor_siecles_monu_lieu csm ON csm.monument_lieu_id = m.id_monument_lieu
                  LEFT JOIN bib_siecle bs ON bs.id_siecle = csm.siecle_monu_lieu_id
                  LEFT JOIN cor_natures_monu_lieu cnm ON cnm.monument_lieu_id = m.id_monument_lieu
                  LEFT JOIN bib_monu_lieu_natures bmn ON bmn.id_monu_lieu_nature = cnm.monu_lieu_nature_id
                  LEFT JOIN cor_etat_cons_monu_lieu cem ON cem.monument_lieu_id = m.id_monument_lieu
                  LEFT JOIN cor_materiaux_monu_lieu cmm ON cmm.monument_lieu_id = m.id_monument_lieu
                  LEFT JOIN cor_medias_monu_lieu cme ON m.id_monument_lieu = cme.monument_lieu_id
                  LEFT JOIN t_medias tm ON tm.id_media = cme.media_monu_lieu_id
         WHERE $2 = true
           AND ($1 IS NULL OR m.titre_monu_lieu ILIKE '%' || $1 || '%')
           AND (($3::int[]) IS NULL OR cardinality($3::int[]) = 0 OR
                csm.siecle_monu_lieu_id = ANY ($3::int[]))
           AND (($4::int[]) IS NULL OR cardinality($4::int[]) = 0 OR
                p.id_pays = ANY ($4::int[]))
           AND (($5::int[]) IS NULL OR cardinality($5::int[]) = 0 OR
                r.id_region = ANY ($5::int[]))
           AND (($6::int[]) IS NULL OR cardinality($6::int[]) = 0 OR
                d.id_departement = ANY ($6::int[]))
           AND (($7::int[]) IS NULL OR cardinality($7::int[]) = 0 OR
                c.id_commune = ANY ($7::int[]))
           AND (($8::int[]) IS NULL OR cardinality($8::int[]) = 0 OR
                cnm.monu_lieu_nature_id = ANY ($8::int[]))
           AND (($9::int[]) IS NULL OR cardinality($9::int[]) = 0 OR
                cnm.monu_lieu_nature_id = ANY ($9::int[]))
           AND (($10::int[]) IS NULL OR cardinality($10::int[]) = 0 OR
                cnm.monu_lieu_nature_id = ANY ($10::int[]))
           AND m.publie = true AND m.publication_status = 'PUBLISHED'
         GROUP BY m.id_monument_lieu

         UNION ALL

         -- ===============================
         -- 2. Mobiliers & images
         -- ===============================
         SELECT mob.id_mobilier_image                        AS id,
                mob.titre_mob_img                            AS title,
                COALESCE(array_agg(DISTINCT bs.siecle_list) FILTER (WHERE bs.siecle_list IS NOT NULL),
                         '{}')                               AS siecles,
                COALESCE(array_agg(DISTINCT bmn.nature_type) FILTER (WHERE bmn.nature_type IS NOT NULL),
                         '{}')                               AS natures,
                COALESCE(
                                jsonb_agg(
                                DISTINCT jsonb_build_object(
                                        'id', tm.id_media,
                                        'titre', tm.titre_media
                                         )
                                         ) FILTER (
                                    WHERE tm.titre_media IS NOT NULL
                                AND tm.titre_media <> ''
                                AND tm.chemin_media IS NOT NULL
                                AND tm.chemin_media <> ''
                                AND jsonb_typeof(tm.chemin_media::jsonb) = 'array'
                                AND EXISTS (SELECT 1
                                            FROM jsonb_array_elements(tm.chemin_media::jsonb) AS elem
                                            WHERE COALESCE(elem ->> 'path', '') <> '')
                                    ),
                                '[]'::jsonb
                )                                            AS medias,
                '{}'::text[]                                 AS professions,
                'mobiliers_images'                           AS source,
                similarity(mob.titre_mob_img, $1) AS score
         FROM t_mobiliers_images mob
                  LEFT JOIN loc_communes c ON c.id_commune = mob.id_commune
                  LEFT JOIN loc_departements d ON d.id_departement = c.id_departement
                  LEFT JOIN loc_regions r ON r.id_region = d.id_region
                  LEFT JOIN loc_pays p ON p.id_pays = r.id_pays
                  LEFT JOIN cor_siecles_mob_img csm ON csm.mobilier_image_id = mob.id_mobilier_image
                  LEFT JOIN bib_siecle bs ON bs.id_siecle = csm.siecle_mob_img_id
                  LEFT JOIN cor_natures_mob_img cnm ON cnm.mobilier_image_id = mob.id_mobilier_image
                  LEFT JOIN bib_mob_img_natures bmn ON bmn.id_nature = cnm.nature_id
                  LEFT JOIN cor_etat_cons_mob_img cem ON cem.mobilier_image_id = mob.id_mobilier_image
                  LEFT JOIN cor_materiaux_mob_img cmm ON cmm.mobilier_image_id = mob.id_mobilier_image
                  LEFT JOIN cor_techniques_mob_img ctm ON ctm.mobilier_image_id = mob.id_mobilier_image
                  LEFT JOIN cor_medias_mob_img cme ON mob.id_mobilier_image = cme.mobilier_image_id
                  LEFT JOIN t_medias tm ON tm.id_media = cme.media_mob_img_id
         WHERE $11 = true
           AND ($1 IS NULL OR mob.titre_mob_img ILIKE '%' || $1 || '%')
           AND (($3::int[]) IS NULL OR cardinality($3::int[]) = 0 OR
                csm.siecle_mob_img_id = ANY ($3::int[]))
           AND (($4::int[]) IS NULL OR cardinality($4::int[]) = 0 OR
                p.id_pays = ANY ($4::int[]))
           AND (($5::int[]) IS NULL OR cardinality($5::int[]) = 0 OR
                r.id_region = ANY ($5::int[]))
           AND (($6::int[]) IS NULL OR cardinality($6::int[]) = 0 OR
                d.id_departement = ANY ($6::int[]))
           AND (($7::int[]) IS NULL OR cardinality($7::int[]) = 0 OR
                c.id_commune = ANY ($7::int[]))
           AND (($12::int[]) IS NULL OR cardinality($12::int[]) = 0 OR
                cnm.nature_id = ANY ($12::int[]))
           AND (($13::int[]) IS NULL OR cardinality($13::int[]) = 0 OR
                cem.etat_cons_mob_img_id = ANY ($13::int[]))
           AND (($14::int[]) IS NULL OR cardinality($14::int[]) = 0 OR
                cmm.materiau_mob_img_id = ANY ($14::int[]))
           AND (($15::int[]) IS NULL OR cardinality($15::int[]) = 0 OR
                ctm.technique_id = ANY ($15::int[]))
           AND mob.publie = true AND mob.publication_status = 'PUBLISHED'
         GROUP BY mob.id_mobilier_image

         UNION ALL

         -- ===============================
         -- 3. Personnes morales
         -- ===============================
         SELECT pm.id_pers_morale                           AS id,
                pm.titre_pers_mo                            AS title,
                COALESCE(array_agg(DISTINCT bs.siecle_list) FILTER (WHERE bs.siecle_list IS NOT NULL),
                         '{}')                              AS siecles,
                COALESCE(array_agg(DISTINCT bpn.pers_mo_nature_type) FILTER (WHERE bpn.pers_mo_nature_type IS NOT NULL),
                         '{}')                              AS natures,
                COALESCE(
                                jsonb_agg(
                                DISTINCT jsonb_build_object(
                                        'id', tm.id_media,
                                        'titre', tm.titre_media
                                         )
                                         ) FILTER (
                                    WHERE tm.titre_media IS NOT NULL
                                AND tm.titre_media <> ''
                                AND tm.chemin_media IS NOT NULL
                                AND tm.chemin_media <> ''
                                AND jsonb_typeof(tm.chemin_media::jsonb) = 'array'
                                AND EXISTS (SELECT 1
                                            FROM jsonb_array_elements(tm.chemin_media::jsonb) AS elem
                                            WHERE COALESCE(elem ->> 'path', '') <> '')
                                    ),
                                '[]'::jsonb
                )                                           AS medias,
                '{}'::text[]                                AS professions,
                'personnes_morales'                         AS source,
                similarity(pm.titre_pers_mo, $1) AS score
         FROM t_pers_morales pm
                  LEFT JOIN loc_communes c ON c.id_commune = pm.id_commune
                  LEFT JOIN loc_departements d ON d.id_departement = c.id_departement
                  LEFT JOIN loc_regions r ON r.id_region = d.id_region
                  LEFT JOIN loc_pays p ON p.id_pays = r.id_pays
                  LEFT JOIN cor_siecles_pers_mo csp ON csp.pers_morale_id = pm.id_pers_morale
                  LEFT JOIN bib_siecle bs ON bs.id_siecle = csp.siecle_pers_mo_id
                  LEFT JOIN cor_natures_pers_mo cnp ON cnp.pers_morale_id = pm.id_pers_morale
                  LEFT JOIN bib_pers_mo_natures bpn ON bpn.id_pers_mo_nature = cnp.pers_mo_nature_id
                  LEFT JOIN cor_medias_pers_mo cme ON pm.id_pers_morale = cme.pers_morale_id
                  LEFT JOIN t_medias tm ON tm.id_media = cme.media_pers_mo_id
         WHERE $16 = true
           AND ($1 IS NULL OR pm.titre_pers_mo ILIKE '%' || $1 || '%')
           AND (($3::int[]) IS NULL OR cardinality($3::int[]) = 0 OR
                csp.siecle_pers_mo_id = ANY ($3::int[]))
           AND (($4::int[]) IS NULL OR cardinality($4::int[]) = 0 OR
                p.id_pays = ANY ($4::int[]))
           AND (($5::int[]) IS NULL OR cardinality($5::int[]) = 0 OR
                r.id_region = ANY ($5::int[]))
           AND (($6::int[]) IS NULL OR cardinality($6::int[]) = 0 OR
                d.id_departement = ANY ($6::int[]))
           AND (($7::int[]) IS NULL OR cardinality($7::int[]) = 0 OR
                c.id_commune = ANY ($7::int[]))
           AND (($17::int[]) IS NULL OR cardinality($17::int[]) = 0 OR
                cnp.pers_mo_nature_id = ANY ($17::int[]))
           AND pm.publie = true AND pm.publication_status = 'PUBLISHED'
         GROUP BY pm.id_pers_morale

         UNION ALL

         -- ===============================
         -- 4. Personnes physiques
         -- ===============================
         SELECT pp.id_pers_physique                               AS id,
                pp.prenom_nom_pers_phy                            AS title,
                COALESCE(array_agg(DISTINCT bs.siecle_list) FILTER (WHERE bs.siecle_list IS NOT NULL),
                         '{}')                                    AS siecles,
                '{}'::text[]                                      AS natures,
                COALESCE(
                                jsonb_agg(
                                DISTINCT jsonb_build_object(
                                        'id', tm.id_media,
                                        'titre', tm.titre_media
                                         )
                                         ) FILTER (
                                    WHERE tm.titre_media IS NOT NULL
                                AND tm.titre_media <> ''
                                AND tm.chemin_media IS NOT NULL
                                AND tm.chemin_media <> ''
                                AND jsonb_typeof(tm.chemin_media::jsonb) = 'array'
                                AND EXISTS (SELECT 1
                                            FROM jsonb_array_elements(tm.chemin_media::jsonb) AS elem
                                            WHERE COALESCE(elem ->> 'path', '') <> '')
                                    ),
                                '[]'::jsonb
                )                                                 AS medias,
                COALESCE(array_agg(DISTINCT bpp.profession_type) FILTER (WHERE bpp.profession_type IS NOT NULL),
                         '{}')                                    AS professions,
                'personnes_physiques'                             AS source,
                similarity(pp.prenom_nom_pers_phy, $1) AS score
         FROM t_pers_physiques pp
                  LEFT JOIN loc_communes c ON c.id_commune = pp.id_commune
                  LEFT JOIN loc_departements d ON d.id_departement = c.id_departement
                  LEFT JOIN loc_regions r ON r.id_region = d.id_region
                  LEFT JOIN loc_pays p ON p.id_pays = r.id_pays
                  LEFT JOIN cor_siecles_pers_phy csp ON csp.pers_physique_id = pp.id_pers_physique
                  LEFT JOIN bib_siecle bs ON bs.id_siecle = csp.siecle_pers_phy_id
                  LEFT JOIN cor_professions_pers_phy cpp ON cpp.pers_physique_id = pp.id_pers_physique
                  LEFT JOIN bib_pers_phy_professions bpp ON bpp.id_profession = cpp.profession_id
                  LEFT JOIN cor_modes_deplacements_pers_phy cmd ON cmd.pers_physique_id = pp.id_pers_physique
                  LEFT JOIN cor_medias_pers_phy cmp ON pp.id_pers_physique = cmp.pers_physique_id
                  LEFT JOIN t_medias tm ON tm.id_media = cmp.media_pers_phy_id
         WHERE $18 = true
           AND ($1 IS NULL OR pp.prenom_nom_pers_phy ILIKE '%' || $1 || '%')
           AND (($3::int[]) IS NULL OR cardinality($3::int[]) = 0 OR
                csp.siecle_pers_phy_id = ANY ($3::int[]))
           AND (($4::int[]) IS NULL OR cardinality($4::int[]) = 0 OR
                p.id_pays = ANY ($4::int[]))
           AND (($5::int[]) IS NULL OR cardinality($5::int[]) = 0 OR
                r.id_region = ANY ($5::int[]))
           AND (($6::int[]) IS NULL OR cardinality($6::int[]) = 0 OR
                d.id_departement = ANY ($6::int[]))
           AND (($7::int[]) IS NULL OR cardinality($7::int[]) = 0 OR
                c.id_commune = ANY ($7::int[]))
           AND (($19::int[]) IS NULL OR cardinality($19::int[]) = 0 OR
                cpp.profession_id = ANY ($19::int[]))
           AND (($20::int[]) IS NULL OR
                cardinality($20::int[]) = 0 OR
                cmd.mode_deplacement_id = ANY ($20::int[]))
           AND pp.publie = true AND pp.publication_status = 'PUBLISHED'
         GROUP BY pp.id_pers_physique) AS results


ORDER BY score DESC
LIMIT $22 OFFSET $21
`

type SearchGlobalParams struct {
	Q                      string
	IncludeMonumentsLieux  interface{}
	Siecles                []int32
	Pays                   []int32
	Region                 []int32
	Departement            []int32
	Commune                []int32
	NaturesMonu            []int32
	EtatsMonu              []int32
	MateriauxMonu          []int32
	IncludeMobiliersImages interface{}
	NaturesMob             []int32
	EtatsMob               []int32
	MateriauxMob           []int32
	TechniquesMob          []int32
	IncludePersMorales     interface{}
	NaturesPersMo          []int32
	IncludePersPhysiques   interface{}
	Professions            []int32
	ModesDeplacements      []int32
	OffsetParam            int32
	LimitParam             int32
}

type SearchGlobalRow struct {
	ID          int32
	Title       string
	Siecles     interface{}
	Natures     interface{}
	Medias      interface{}
	Professions []string
	Source      string
	Score       float32
	TotalCount  int64
}

func (q *Queries) SearchGlobal(ctx context.Context, arg SearchGlobalParams) ([]SearchGlobalRow, error) {
	rows, err := q.db.Query(ctx, searchGlobal,
		arg.Q,
		arg.IncludeMonumentsLieux,
		arg.Siecles,
		arg.Pays,
		arg.Region,
		arg.Departement,
		arg.Commune,
		arg.NaturesMonu,
		arg.EtatsMonu,
		arg.MateriauxMonu,
		arg.IncludeMobiliersImages,
		arg.NaturesMob,
		arg.EtatsMob,
		arg.MateriauxMob,
		arg.TechniquesMob,
		arg.IncludePersMorales,
		arg.NaturesPersMo,
		arg.IncludePersPhysiques,
		arg.Professions,
		arg.ModesDeplacements,
		arg.OffsetParam,
		arg.LimitParam,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SearchGlobalRow
	for rows.Next() {
		var i SearchGlobalRow
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Siecles,
			&i.Natures,
			&i.Medias,
			&i.Professions,
			&i.Source,
			&i.Score,
			&i.TotalCount,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const searchGlobalNoText = `-- name: SearchGlobalNoText :many
SELECT id, title, siecles, natures, medias, professions, source, COUNT(*) OVER () AS total_count
FROM (
         -- ===============================
         -- 1. Monuments & lieux
         -- ===============================
         SELECT m.id_monument_lieu                           AS id,
                m.titre_monu_lieu                            AS title,
                COALESCE(array_agg(DISTINCT bs.siecle_list) FILTER (WHERE bs.siecle_list IS NOT NULL),
                         '{}')                               AS siecles,
                COALESCE(array_agg(DISTINCT bmn.monu_lieu_nature_type)
                         FILTER (WHERE bmn.monu_lieu_nature_type IS NOT NULL),
                         '{}')                               AS natures,
                COALESCE(
                                jsonb_agg(
                                DISTINCT jsonb_build_object(
                                        'id', tm.id_media,
                                        'titre', tm.titre_media
                                         )
                                         ) FILTER (
                                    WHERE tm.titre_media IS NOT NULL
                                AND tm.titre_media <> ''
                                AND tm.chemin_media IS NOT NULL
                                AND tm.chemin_media <> ''
                                AND jsonb_typeof(tm.chemin_media::jsonb) = 'array'
                                AND EXISTS (SELECT 1
                                            FROM jsonb_array_elements(tm.chemin_media::jsonb) AS elem
                                            WHERE COALESCE(elem ->> 'path', '') <> '')
                                    ),
                                '[]'::jsonb
                )                                            AS medias,
                '{}'::text[]                                 AS professions,
                'monuments_lieux'                            AS source
         FROM t_monuments_lieux m
                  LEFT JOIN loc_communes c ON c.id_commune = m.id_commune
                  LEFT JOIN loc_departements d ON d.id_departement = c.id_departement
                  LEFT JOIN loc_regions r ON r.id_region = d.id_region
                  LEFT JOIN loc_pays p ON p.id_pays = r.id_pays
                  LEFT JOIN cor_siecles_monu_lieu csm ON csm.monument_lieu_id = m.id_monument_lieu
                  LEFT JOIN bib_siecle bs ON bs.id_siecle = csm.siecle_monu_lieu_id
                  LEFT JOIN cor_natures_monu_lieu cnm ON cnm.monument_lieu_id = m.id_monument_lieu
                  LEFT JOIN bib_monu_lieu_natures bmn ON bmn.id_monu_lieu_nature = cnm.monu_lieu_nature_id
                  LEFT JOIN cor_etat_cons_monu_lieu cem ON cem.monument_lieu_id = m.id_monument_lieu
                  LEFT JOIN cor_materiaux_monu_lieu cmm ON cmm.monument_lieu_id = m.id_monument_lieu
                  LEFT JOIN cor_medias_monu_lieu cme ON m.id_monument_lieu = cme.monument_lieu_id
                  LEFT JOIN t_medias tm ON tm.id_media = cme.media_monu_lieu_id
         WHERE $1 = true
           AND (($2::int[]) IS NULL OR cardinality($2::int[]) = 0 OR
                csm.siecle_monu_lieu_id = ANY ($2::int[]))
           AND (($3::int[]) IS NULL OR cardinality($3::int[]) = 0 OR
                p.id_pays = ANY ($3::int[]))
           AND (($4::int[]) IS NULL OR cardinality($4::int[]) = 0 OR
                r.id_region = ANY ($4::int[]))
           AND (($5::int[]) IS NULL OR cardinality($5::int[]) = 0 OR
                d.id_departement = ANY ($5::int[]))
           AND (($6::int[]) IS NULL OR cardinality($6::int[]) = 0 OR
                c.id_commune = ANY ($6::int[]))
           AND (($7::int[]) IS NULL OR cardinality($7::int[]) = 0 OR
                cnm.monu_lieu_nature_id = ANY ($7::int[]))
           AND (($8::int[]) IS NULL OR cardinality($8::int[]) = 0 OR
                cnm.monu_lieu_nature_id = ANY ($8::int[]))
           AND (($9::int[]) IS NULL OR cardinality($9::int[]) = 0 OR
                cnm.monu_lieu_nature_id = ANY ($9::int[]))
           AND m.publie = true AND m.publication_status = 'PUBLISHED'
         GROUP BY m.id_monument_lieu

         UNION ALL

         -- ===============================
         -- 2. Mobiliers & images
         -- ===============================
         SELECT mob.id_mobilier_image                        AS id,
                mob.titre_mob_img                            AS title,
                COALESCE(array_agg(DISTINCT bs.siecle_list) FILTER (WHERE bs.siecle_list IS NOT NULL),
                         '{}')                               AS siecles,
                COALESCE(array_agg(DISTINCT bmn.nature_type) FILTER (WHERE bmn.nature_type IS NOT NULL),
                         '{}')                               AS natures,
                COALESCE(
                                jsonb_agg(
                                DISTINCT jsonb_build_object(
                                        'id', tm.id_media,
                                        'titre', tm.titre_media
                                         )
                                         ) FILTER (
                                    WHERE tm.titre_media IS NOT NULL
                                AND tm.titre_media <> ''
                                AND tm.chemin_media IS NOT NULL
                                AND tm.chemin_media <> ''
                                AND jsonb_typeof(tm.chemin_media::jsonb) = 'array'
                                AND EXISTS (SELECT 1
                                            FROM jsonb_array_elements(tm.chemin_media::jsonb) AS elem
                                            WHERE COALESCE(elem ->> 'path', '') <> '')
                                    ),
                                '[]'::jsonb
                )                                            AS medias,
                '{}'::text[]                                 AS professions,
                'mobiliers_images'                           AS source
         FROM t_mobiliers_images mob
                  LEFT JOIN loc_communes c ON c.id_commune = mob.id_commune
                  LEFT JOIN loc_departements d ON d.id_departement = c.id_departement
                  LEFT JOIN loc_regions r ON r.id_region = d.id_region
                  LEFT JOIN loc_pays p ON p.id_pays = r.id_pays
                  LEFT JOIN cor_siecles_mob_img csm ON csm.mobilier_image_id = mob.id_mobilier_image
                  LEFT JOIN bib_siecle bs ON bs.id_siecle = csm.siecle_mob_img_id
                  LEFT JOIN cor_natures_mob_img cnm ON cnm.mobilier_image_id = mob.id_mobilier_image
                  LEFT JOIN bib_mob_img_natures bmn ON bmn.id_nature = cnm.nature_id
                  LEFT JOIN cor_etat_cons_mob_img cem ON cem.mobilier_image_id = mob.id_mobilier_image
                  LEFT JOIN cor_materiaux_mob_img cmm ON cmm.mobilier_image_id = mob.id_mobilier_image
                  LEFT JOIN cor_techniques_mob_img ctm ON ctm.mobilier_image_id = mob.id_mobilier_image
                  LEFT JOIN cor_medias_mob_img cme ON mob.id_mobilier_image = cme.mobilier_image_id
                  LEFT JOIN t_medias tm ON tm.id_media = cme.media_mob_img_id
         WHERE $10 = true
           AND (($2::int[]) IS NULL OR cardinality($2::int[]) = 0 OR
                csm.siecle_mob_img_id = ANY ($2::int[]))
           AND (($3::int[]) IS NULL OR cardinality($3::int[]) = 0 OR
                p.id_pays = ANY ($3::int[]))
           AND (($4::int[]) IS NULL OR cardinality($4::int[]) = 0 OR
                r.id_region = ANY ($4::int[]))
           AND (($5::int[]) IS NULL OR cardinality($5::int[]) = 0 OR
                d.id_departement = ANY ($5::int[]))
           AND (($6::int[]) IS NULL OR cardinality($6::int[]) = 0 OR
                c.id_commune = ANY ($6::int[]))
           AND (($11::int[]) IS NULL OR cardinality($11::int[]) = 0 OR
                cnm.nature_id = ANY ($11::int[]))
           AND (($12::int[]) IS NULL OR cardinality($12::int[]) = 0 OR
                cem.etat_cons_mob_img_id = ANY ($12::int[]))
           AND (($13::int[]) IS NULL OR cardinality($13::int[]) = 0 OR
                cmm.materiau_mob_img_id = ANY ($13::int[]))
           AND (($14::int[]) IS NULL OR cardinality($14::int[]) = 0 OR
                ctm.technique_id = ANY ($14::int[]))
           AND mob.publie = true AND mob.publication_status = 'PUBLISHED'
         GROUP BY mob.id_mobilier_image

         UNION ALL

         -- ===============================
         -- 3. Personnes morales
         -- ===============================
         SELECT pm.id_pers_morale                           AS id,
                pm.titre_pers_mo                            AS title,
                COALESCE(array_agg(DISTINCT bs.siecle_list) FILTER (WHERE bs.siecle_list IS NOT NULL),
                         '{}')                              AS siecles,
                COALESCE(array_agg(DISTINCT bpn.pers_mo_nature_type) FILTER (WHERE bpn.pers_mo_nature_type IS NOT NULL),
                         '{}')                              AS natures,
                COALESCE(
                                jsonb_agg(
                                DISTINCT jsonb_build_object(
                                        'id', tm.id_media,
                                        'titre', tm.titre_media
                                         )
                                         ) FILTER (
                                    WHERE tm.titre_media IS NOT NULL
                                AND tm.titre_media <> ''
                                AND tm.chemin_media IS NOT NULL
                                AND tm.chemin_media <> ''
                                AND jsonb_typeof(tm.chemin_media::jsonb) = 'array'
                                AND EXISTS (SELECT 1
                                            FROM jsonb_array_elements(tm.chemin_media::jsonb) AS elem
                                            WHERE COALESCE(elem ->> 'path', '') <> '')
                                    ),
                                '[]'::jsonb
                )                                           AS medias,
                '{}'::text[]                                AS professions,
                'personnes_morales'                         AS source
         FROM t_pers_morales pm
                  LEFT JOIN loc_communes c ON c.id_commune = pm.id_commune
                  LEFT JOIN loc_departements d ON d.id_departement = c.id_departement
                  LEFT JOIN loc_regions r ON r.id_region = d.id_region
                  LEFT JOIN loc_pays p ON p.id_pays = r.id_pays
                  LEFT JOIN cor_siecles_pers_mo csp ON csp.pers_morale_id = pm.id_pers_morale
                  LEFT JOIN bib_siecle bs ON bs.id_siecle = csp.siecle_pers_mo_id
                  LEFT JOIN cor_natures_pers_mo cnp ON cnp.pers_morale_id = pm.id_pers_morale
                  LEFT JOIN bib_pers_mo_natures bpn ON bpn.id_pers_mo_nature = cnp.pers_mo_nature_id
                  LEFT JOIN cor_medias_pers_mo cme ON pm.id_pers_morale = cme.pers_morale_id
                  LEFT JOIN t_medias tm ON tm.id_media = cme.media_pers_mo_id
         WHERE $15 = true
           AND (($2::int[]) IS NULL OR cardinality($2::int[]) = 0 OR
                csp.siecle_pers_mo_id = ANY ($2::int[]))
           AND (($3::int[]) IS NULL OR cardinality($3::int[]) = 0 OR
                p.id_pays = ANY ($3::int[]))
           AND (($4::int[]) IS NULL OR cardinality($4::int[]) = 0 OR
                r.id_region = ANY ($4::int[]))
           AND (($5::int[]) IS NULL OR cardinality($5::int[]) = 0 OR
                d.id_departement = ANY ($5::int[]))
           AND (($6::int[]) IS NULL OR cardinality($6::int[]) = 0 OR
                c.id_commune = ANY ($6::int[]))
           AND (($16::int[]) IS NULL OR cardinality($16::int[]) = 0 OR
                cnp.pers_mo_nature_id = ANY ($16::int[]))
           AND pm.publie = true AND pm.publication_status = 'PUBLISHED'
         GROUP BY pm.id_pers_morale

         UNION ALL

         -- ===============================
         -- 4. Personnes physiques
         -- ===============================
         SELECT pp.id_pers_physique                               AS id,
                pp.prenom_nom_pers_phy                            AS title,
                COALESCE(array_agg(DISTINCT bs.siecle_list) FILTER (WHERE bs.siecle_list IS NOT NULL),
                         '{}')                                    AS siecles,
                '{}'::text[]                                      AS natures,
                COALESCE(
                                jsonb_agg(
                                DISTINCT jsonb_build_object(
                                        'id', tm.id_media,
                                        'titre', tm.titre_media
                                         )
                                         ) FILTER (
                                    WHERE tm.titre_media IS NOT NULL
                                AND tm.titre_media <> ''
                                AND tm.chemin_media IS NOT NULL
                                AND tm.chemin_media <> ''
                                AND jsonb_typeof(tm.chemin_media::jsonb) = 'array'
                                AND EXISTS (SELECT 1
                                            FROM jsonb_array_elements(tm.chemin_media::jsonb) AS elem
                                            WHERE COALESCE(elem ->> 'path', '') <> '')
                                    ),
                                '[]'::jsonb
                )                                                 AS medias,
                COALESCE(array_agg(DISTINCT bpp.profession_type) FILTER (WHERE bpp.profession_type IS NOT NULL),
                         '{}')                                    AS professions,
                'personnes_physiques'                             AS source
         FROM t_pers_physiques pp
                  LEFT JOIN loc_communes c ON c.id_commune = pp.id_commune
                  LEFT JOIN loc_departements d ON d.id_departement = c.id_departement
                  LEFT JOIN loc_regions r ON r.id_region = d.id_region
                  LEFT JOIN loc_pays p ON p.id_pays = r.id_pays
                  LEFT JOIN cor_siecles_pers_phy csp ON csp.pers_physique_id = pp.id_pers_physique
                  LEFT JOIN bib_siecle bs ON bs.id_siecle = csp.siecle_pers_phy_id
                  LEFT JOIN cor_professions_pers_phy cpp ON cpp.pers_physique_id = pp.id_pers_physique
                  LEFT JOIN bib_pers_phy_professions bpp ON bpp.id_profession = cpp.profession_id
                  LEFT JOIN cor_modes_deplacements_pers_phy cmd ON cmd.pers_physique_id = pp.id_pers_physique
                  LEFT JOIN cor_medias_pers_phy cmp ON pp.id_pers_physique = cmp.pers_physique_id
                  LEFT JOIN t_medias tm ON tm.id_media = cmp.media_pers_phy_id
         WHERE $17 = true
           AND (($2::int[]) IS NULL OR cardinality($2::int[]) = 0 OR
                csp.siecle_pers_phy_id = ANY ($2::int[]))
           AND (($3::int[]) IS NULL OR cardinality($3::int[]) = 0 OR
                p.id_pays = ANY ($3::int[]))
           AND (($4::int[]) IS NULL OR cardinality($4::int[]) = 0 OR
                r.id_region = ANY ($4::int[]))
           AND (($5::int[]) IS NULL OR cardinality($5::int[]) = 0 OR
                d.id_departement = ANY ($5::int[]))
           AND (($6::int[]) IS NULL OR cardinality($6::int[]) = 0 OR
                c.id_commune = ANY ($6::int[]))
           AND (($18::int[]) IS NULL OR cardinality($18::int[]) = 0 OR
                cpp.profession_id = ANY ($18::int[]))
           AND (($19::int[]) IS NULL OR
                cardinality($19::int[]) = 0 OR
                cmd.mode_deplacement_id = ANY ($19::int[]))
           AND pp.publie = true AND pp.publication_status = 'PUBLISHED'
         GROUP BY pp.id_pers_physique) AS results


ORDER BY title
LIMIT $21 OFFSET $20
`

type SearchGlobalNoTextParams struct {
	IncludeMonumentsLieux  interface{}
	Siecles                []int32
	Pays                   []int32
	Region                 []int32
	Departement            []int32
	Commune                []int32
	NaturesMonu            []int32
	EtatsMonu              []int32
	MateriauxMonu          []int32
	IncludeMobiliersImages interface{}
	NaturesMob             []int32
	EtatsMob               []int32
	MateriauxMob           []int32
	TechniquesMob          []int32
	IncludePersMorales     interface{}
	NaturesPersMo          []int32
	IncludePersPhysiques   interface{}
	Professions            []int32
	ModesDeplacements      []int32
	OffsetParam            int32
	LimitParam             int32
}

type SearchGlobalNoTextRow struct {
	ID          int32
	Title       string
	Siecles     interface{}
	Natures     interface{}
	Medias      interface{}
	Professions []string
	Source      string
	TotalCount  int64
}

func (q *Queries) SearchGlobalNoText(ctx context.Context, arg SearchGlobalNoTextParams) ([]SearchGlobalNoTextRow, error) {
	rows, err := q.db.Query(ctx, searchGlobalNoText,
		arg.IncludeMonumentsLieux,
		arg.Siecles,
		arg.Pays,
		arg.Region,
		arg.Departement,
		arg.Commune,
		arg.NaturesMonu,
		arg.EtatsMonu,
		arg.MateriauxMonu,
		arg.IncludeMobiliersImages,
		arg.NaturesMob,
		arg.EtatsMob,
		arg.MateriauxMob,
		arg.TechniquesMob,
		arg.IncludePersMorales,
		arg.NaturesPersMo,
		arg.IncludePersPhysiques,
		arg.Professions,
		arg.ModesDeplacements,
		arg.OffsetParam,
		arg.LimitParam,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SearchGlobalNoTextRow
	for rows.Next() {
		var i SearchGlobalNoTextRow
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Siecles,
			&i.Natures,
			&i.Medias,
			&i.Professions,
			&i.Source,
			&i.TotalCount,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
