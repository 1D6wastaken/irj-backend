// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: users.sql

package queries

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const approveUserByID = `-- name: ApproveUserByID :exec
UPDATE t_app_users
SET grade = 'ACTIVE'
WHERE id = $1
`

func (q *Queries) ApproveUserByID(ctx context.Context, id string) error {
	_, err := q.db.Exec(ctx, approveUserByID, id)
	return err
}

const confirmEmailUserByID = `-- name: ConfirmEmailUserByID :exec
UPDATE t_app_users
SET email_confirm = true
WHERE id = $1
`

func (q *Queries) ConfirmEmailUserByID(ctx context.Context, id string) error {
	_, err := q.db.Exec(ctx, confirmEmailUserByID, id)
	return err
}

const createUser = `-- name: CreateUser :exec
INSERT INTO t_app_users (id, prenom, nom, email, mot_de_passe, telephone, organisation, domaine, motivation, last_login)
VALUES ($1, $2, $3, $4, $5, $6,
        $7, $8, $9, now())
`

type CreateUserParams struct {
	ID           string
	Firstname    string
	Name         string
	Email        string
	Password     string
	Phone        pgtype.Text
	Organization pgtype.Text
	Domain       DomaineExpertise
	Motivation   pgtype.Text
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) error {
	_, err := q.db.Exec(ctx, createUser,
		arg.ID,
		arg.Firstname,
		arg.Name,
		arg.Email,
		arg.Password,
		arg.Phone,
		arg.Organization,
		arg.Domain,
		arg.Motivation,
	)
	return err
}

const deleteUserByID = `-- name: DeleteUserByID :exec
DELETE
FROM t_app_users
WHERE id = $1
`

func (q *Queries) DeleteUserByID(ctx context.Context, id string) error {
	_, err := q.db.Exec(ctx, deleteUserByID, id)
	return err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id,
       prenom,
       nom,
       mot_de_passe,
       email,
       email_confirm,
       telephone,
       organisation,
       domaine,
       motivation,
       grade,
       date_creation
FROM t_app_users
WHERE email = $1
`

type GetUserByEmailRow struct {
	ID           string
	Prenom       string
	Nom          string
	MotDePasse   string
	Email        string
	EmailConfirm bool
	Telephone    pgtype.Text
	Organisation pgtype.Text
	Domaine      DomaineExpertise
	Motivation   pgtype.Text
	Grade        UserGrade
	DateCreation pgtype.Timestamptz
}

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (GetUserByEmailRow, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var i GetUserByEmailRow
	err := row.Scan(
		&i.ID,
		&i.Prenom,
		&i.Nom,
		&i.MotDePasse,
		&i.Email,
		&i.EmailConfirm,
		&i.Telephone,
		&i.Organisation,
		&i.Domaine,
		&i.Motivation,
		&i.Grade,
		&i.DateCreation,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT prenom,
       nom,
       mot_de_passe,
       email,
       email_confirm,
       telephone,
       organisation,
       domaine,
       motivation,
       grade,
       date_creation
FROM t_app_users
WHERE id = $1
`

type GetUserByIDRow struct {
	Prenom       string
	Nom          string
	MotDePasse   string
	Email        string
	EmailConfirm bool
	Telephone    pgtype.Text
	Organisation pgtype.Text
	Domaine      DomaineExpertise
	Motivation   pgtype.Text
	Grade        UserGrade
	DateCreation pgtype.Timestamptz
}

func (q *Queries) GetUserByID(ctx context.Context, id string) (GetUserByIDRow, error) {
	row := q.db.QueryRow(ctx, getUserByID, id)
	var i GetUserByIDRow
	err := row.Scan(
		&i.Prenom,
		&i.Nom,
		&i.MotDePasse,
		&i.Email,
		&i.EmailConfirm,
		&i.Telephone,
		&i.Organisation,
		&i.Domaine,
		&i.Motivation,
		&i.Grade,
		&i.DateCreation,
	)
	return i, err
}

const getUsers = `-- name: GetUsers :many
SELECT id,
       prenom,
       nom,
       email,
       last_login
FROM t_app_users
`

type GetUsersRow struct {
	ID        string
	Prenom    string
	Nom       string
	Email     string
	LastLogin pgtype.Timestamptz
}

func (q *Queries) GetUsers(ctx context.Context) ([]GetUsersRow, error) {
	rows, err := q.db.Query(ctx, getUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetUsersRow
	for rows.Next() {
		var i GetUsersRow
		if err := rows.Scan(
			&i.ID,
			&i.Prenom,
			&i.Nom,
			&i.Email,
			&i.LastLogin,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUsersByGrade = `-- name: GetUsersByGrade :many
SELECT id,
       email,
       prenom,
       nom,
       organisation,
       domaine,
       date_creation,
       motivation,
       telephone
FROM t_app_users
WHERE grade = $1
`

type GetUsersByGradeRow struct {
	ID           string
	Email        string
	Prenom       string
	Nom          string
	Organisation pgtype.Text
	Domaine      DomaineExpertise
	DateCreation pgtype.Timestamptz
	Motivation   pgtype.Text
	Telephone    pgtype.Text
}

func (q *Queries) GetUsersByGrade(ctx context.Context, grade UserGrade) ([]GetUsersByGradeRow, error) {
	rows, err := q.db.Query(ctx, getUsersByGrade, grade)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetUsersByGradeRow
	for rows.Next() {
		var i GetUsersByGradeRow
		if err := rows.Scan(
			&i.ID,
			&i.Email,
			&i.Prenom,
			&i.Nom,
			&i.Organisation,
			&i.Domaine,
			&i.DateCreation,
			&i.Motivation,
			&i.Telephone,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateLastLogin = `-- name: UpdateLastLogin :exec
UPDATE t_app_users
SET last_login = NOW()
WHERE id = $1
`

func (q *Queries) UpdateLastLogin(ctx context.Context, id string) error {
	_, err := q.db.Exec(ctx, updateLastLogin, id)
	return err
}

const updatePasswordByID = `-- name: UpdatePasswordByID :exec
UPDATE t_app_users
SET mot_de_passe = $2
WHERE id = $1
`

type UpdatePasswordByIDParams struct {
	ID       string
	Password string
}

func (q *Queries) UpdatePasswordByID(ctx context.Context, arg UpdatePasswordByIDParams) error {
	_, err := q.db.Exec(ctx, updatePasswordByID, arg.ID, arg.Password)
	return err
}

const updateUserByID = `-- name: UpdateUserByID :exec
UPDATE t_app_users
SET prenom        = $2,
    nom           = $3,
    email         = $4,
    email_confirm = $5,
    mot_de_passe  = $6,
    telephone     = $7,
    organisation  = $8,
    domaine       = $9,
    date_maj      = now()
WHERE id = $1
`

type UpdateUserByIDParams struct {
	ID           string
	Firstname    string
	Name         string
	Email        string
	EmailConfirm bool
	Password     string
	Phone        pgtype.Text
	Organization pgtype.Text
	Domain       DomaineExpertise
}

func (q *Queries) UpdateUserByID(ctx context.Context, arg UpdateUserByIDParams) error {
	_, err := q.db.Exec(ctx, updateUserByID,
		arg.ID,
		arg.Firstname,
		arg.Name,
		arg.Email,
		arg.EmailConfirm,
		arg.Password,
		arg.Phone,
		arg.Organization,
		arg.Domain,
	)
	return err
}
