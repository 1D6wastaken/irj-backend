// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: mobiliers_images.sql

package queries

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const attachAuthorToMobImg = `-- name: AttachAuthorToMobImg :exec
INSERT INTO cor_auteur_fiche_mob_img
    (auteur_fiche_mob_img_id, mobilier_image_id)
VALUES ($1, $2)
`

type AttachAuthorToMobImgParams struct {
	AuteurID int32
	ID       int32
}

func (q *Queries) AttachAuthorToMobImg(ctx context.Context, arg AttachAuthorToMobImgParams) error {
	_, err := q.db.Exec(ctx, attachAuthorToMobImg, arg.AuteurID, arg.ID)
	return err
}

const attachEtatsToMobImg = `-- name: AttachEtatsToMobImg :exec
INSERT INTO cor_etat_cons_mob_img
    (etat_cons_mob_img_id, mobilier_image_id)
SELECT unnest($1::int[]), $2
`

type AttachEtatsToMobImgParams struct {
	EtatIds []int32
	ID      int32
}

func (q *Queries) AttachEtatsToMobImg(ctx context.Context, arg AttachEtatsToMobImgParams) error {
	_, err := q.db.Exec(ctx, attachEtatsToMobImg, arg.EtatIds, arg.ID)
	return err
}

const attachMateriauxToMobImg = `-- name: AttachMateriauxToMobImg :exec
INSERT INTO cor_materiaux_mob_img
    (materiau_mob_img_id, mobilier_image_id)
SELECT unnest($1::int[]), $2
`

type AttachMateriauxToMobImgParams struct {
	MateriauIds []int32
	ID          int32
}

func (q *Queries) AttachMateriauxToMobImg(ctx context.Context, arg AttachMateriauxToMobImgParams) error {
	_, err := q.db.Exec(ctx, attachMateriauxToMobImg, arg.MateriauIds, arg.ID)
	return err
}

const attachMediasToMobImg = `-- name: AttachMediasToMobImg :exec
INSERT INTO cor_medias_mob_img
    (media_mob_img_id, mobilier_image_id)
SELECT unnest($1::int[]), $2
`

type AttachMediasToMobImgParams struct {
	MediaIds []int32
	ID       int32
}

func (q *Queries) AttachMediasToMobImg(ctx context.Context, arg AttachMediasToMobImgParams) error {
	_, err := q.db.Exec(ctx, attachMediasToMobImg, arg.MediaIds, arg.ID)
	return err
}

const attachNaturesToMobImg = `-- name: AttachNaturesToMobImg :exec
INSERT INTO cor_natures_mob_img (nature_id, mobilier_image_id)
SELECT unnest($1::int[]), $2
`

type AttachNaturesToMobImgParams struct {
	NatureIds []int32
	ID        int32
}

func (q *Queries) AttachNaturesToMobImg(ctx context.Context, arg AttachNaturesToMobImgParams) error {
	_, err := q.db.Exec(ctx, attachNaturesToMobImg, arg.NatureIds, arg.ID)
	return err
}

const attachSieclesToMobImg = `-- name: AttachSieclesToMobImg :exec
INSERT INTO cor_siecles_mob_img
    (siecle_mob_img_id, mobilier_image_id)
SELECT unnest($1::int[]), $2
`

type AttachSieclesToMobImgParams struct {
	SiecleID []int32
	ID       int32
}

func (q *Queries) AttachSieclesToMobImg(ctx context.Context, arg AttachSieclesToMobImgParams) error {
	_, err := q.db.Exec(ctx, attachSieclesToMobImg, arg.SiecleID, arg.ID)
	return err
}

const attachTechniquesToMobImg = `-- name: AttachTechniquesToMobImg :exec
INSERT INTO cor_techniques_mob_img
    (technique_id, mobilier_image_id)
SELECT unnest($1::int[]), $2
`

type AttachTechniquesToMobImgParams struct {
	TechniquesIds []int32
	ID            int32
}

func (q *Queries) AttachTechniquesToMobImg(ctx context.Context, arg AttachTechniquesToMobImgParams) error {
	_, err := q.db.Exec(ctx, attachTechniquesToMobImg, arg.TechniquesIds, arg.ID)
	return err
}

const attachThemesToMobImg = `-- name: AttachThemesToMobImg :exec
INSERT INTO cor_themes_mob_img (theme_id, mob_img_id)
SELECT unnest($1::int[]), $2
`

type AttachThemesToMobImgParams struct {
	ThemeIds []int32
	ID       int32
}

func (q *Queries) AttachThemesToMobImg(ctx context.Context, arg AttachThemesToMobImgParams) error {
	_, err := q.db.Exec(ctx, attachThemesToMobImg, arg.ThemeIds, arg.ID)
	return err
}

const createMobilierImage = `-- name: CreateMobilierImage :one
INSERT INTO t_mobiliers_images
(titre_mob_img,
 description,
 historique,
 inscriptions,
 lieu_origine,
 lieu_conservation,
 bibliographie,
 protection,
 protection_commentaires,
 source,
 date_cr_ation,
 date_maj,
 contributeurs,
 id_commune,
 id_pays,
 publie,
 publication_status,
 parent_id)
VALUES ($1,
        $2,
        $3,
        $4,
        $5,
        $6,
        $7,
        $8,
        $9,
        $10,
        NOW(),
        NOW(),
        $11,
        $12,
        $13,
        false,
        'DRAFT',
        $14)
RETURNING id_mobilier_image
`

type CreateMobilierImageParams struct {
	TitreMobImg       string
	Description       pgtype.Text
	Historique        pgtype.Text
	Inscriptions      pgtype.Text
	Origin            pgtype.Text
	Place             pgtype.Text
	Bibliographie     pgtype.Text
	Protection        pgtype.Bool
	ProtectionComment pgtype.Text
	Source            pgtype.Text
	Contributors      pgtype.Text
	IDCommune         pgtype.Int4
	IDPays            pgtype.Int4
	ParentID          pgtype.Int4
}

func (q *Queries) CreateMobilierImage(ctx context.Context, arg CreateMobilierImageParams) (int32, error) {
	row := q.db.QueryRow(ctx, createMobilierImage,
		arg.TitreMobImg,
		arg.Description,
		arg.Historique,
		arg.Inscriptions,
		arg.Origin,
		arg.Place,
		arg.Bibliographie,
		arg.Protection,
		arg.ProtectionComment,
		arg.Source,
		arg.Contributors,
		arg.IDCommune,
		arg.IDPays,
		arg.ParentID,
	)
	var id_mobilier_image int32
	err := row.Scan(&id_mobilier_image)
	return id_mobilier_image, err
}

const deletePendingMobilierImage = `-- name: DeletePendingMobilierImage :exec
DELETE
FROM t_mobiliers_images
WHERE id_mobilier_image = $1
`

func (q *Queries) DeletePendingMobilierImage(ctx context.Context, idMobilierImage int32) error {
	_, err := q.db.Exec(ctx, deletePendingMobilierImage, idMobilierImage)
	return err
}

const detachAuthorFromMobImg = `-- name: DetachAuthorFromMobImg :exec
DELETE
FROM cor_auteur_fiche_mob_img
WHERE mobilier_image_id = $1
`

func (q *Queries) DetachAuthorFromMobImg(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, detachAuthorFromMobImg, id)
	return err
}

const detachEtatsFromMobImg = `-- name: DetachEtatsFromMobImg :exec
DELETE
FROM cor_etat_cons_mob_img
WHERE mobilier_image_id = $1
`

func (q *Queries) DetachEtatsFromMobImg(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, detachEtatsFromMobImg, id)
	return err
}

const detachMateriauxFromMobImg = `-- name: DetachMateriauxFromMobImg :exec
DELETE
FROM cor_materiaux_mob_img
WHERE mobilier_image_id = $1
`

func (q *Queries) DetachMateriauxFromMobImg(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, detachMateriauxFromMobImg, id)
	return err
}

const detachMediasFromMobImg = `-- name: DetachMediasFromMobImg :exec
DELETE
FROM cor_medias_mob_img
WHERE mobilier_image_id = $1
`

func (q *Queries) DetachMediasFromMobImg(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, detachMediasFromMobImg, id)
	return err
}

const detachNaturesFromMobImg = `-- name: DetachNaturesFromMobImg :exec
DELETE
FROM cor_natures_mob_img
WHERE mobilier_image_id = $1
`

func (q *Queries) DetachNaturesFromMobImg(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, detachNaturesFromMobImg, id)
	return err
}

const detachSieclesFromMobImg = `-- name: DetachSieclesFromMobImg :exec
DELETE
FROM cor_siecles_mob_img
WHERE mobilier_image_id = $1
`

func (q *Queries) DetachSieclesFromMobImg(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, detachSieclesFromMobImg, id)
	return err
}

const detachTechniquesFromMobImg = `-- name: DetachTechniquesFromMobImg :exec
DELETE
FROM cor_techniques_mob_img
WHERE mobilier_image_id = $1
`

func (q *Queries) DetachTechniquesFromMobImg(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, detachTechniquesFromMobImg, id)
	return err
}

const detachThemesFromMobImg = `-- name: DetachThemesFromMobImg :exec
DELETE
FROM cor_themes_mob_img
WHERE mob_img_id = $1
`

func (q *Queries) DetachThemesFromMobImg(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, detachThemesFromMobImg, id)
	return err
}

const getFilteredMobiliersImages = `-- name: GetFilteredMobiliersImages :many
SELECT m.id_mobilier_image                                                                            AS id,
       m.titre_mob_img                                                                                AS title,
       COALESCE(array_agg(DISTINCT bs.siecle_list) FILTER (WHERE bs.siecle_list IS NOT NULL), '{}')   AS siecles,
       COALESCE(array_agg(DISTINCT bmn.nature_type) FILTER (WHERE bmn.nature_type IS NOT NULL), '{}') AS natures,
       COALESCE(array_agg(DISTINCT tm.chemin_media) FILTER (WHERE tm.chemin_media IS NOT NULL), '{}') AS medias
FROM t_mobiliers_images m
         LEFT JOIN cor_siecles_mob_img csm ON m.id_mobilier_image = csm.mobilier_image_id
         LEFT JOIN bib_siecle bs ON bs.id_siecle = csm.siecle_mob_img_id

         LEFT JOIN cor_natures_mob_img cnm ON m.id_mobilier_image = cnm.mobilier_image_id
         LEFT JOIN bib_mob_img_natures bmn ON bmn.id_nature = cnm.nature_id

         LEFT JOIN cor_techniques_mob_img ctm ON m.id_mobilier_image = ctm.mobilier_image_id
         LEFT JOIN bib_mob_img_techniques bmt ON bmt.id_technique = ctm.technique_id

         LEFT JOIN cor_medias_mob_img cme ON m.id_mobilier_image = cme.mobilier_image_id
         LEFT JOIN t_medias tm ON tm.id_media = cme.media_mob_img_id

         LEFT JOIN loc_communes c ON m.id_commune = c.id_commune
         LEFT JOIN loc_departements d ON c.id_departement = d.id_departement
         LEFT JOIN loc_regions r ON d.id_region = r.id_region
         LEFT JOIN loc_pays p ON r.id_pays = p.id_pays

         LEFT JOIN cor_etat_cons_mob_img cel ON m.id_mobilier_image = cel.mobilier_image_id
         LEFT JOIN cor_auteur_fiche_mob_img caf ON m.id_mobilier_image = caf.mobilier_image_id
         LEFT JOIN cor_materiaux_mob_img cml ON m.id_mobilier_image = cml.mobilier_image_id
         LEFT JOIN cor_mob_img_pers_mo cpm ON m.id_mobilier_image = cpm.mobilier_image_id
         LEFT JOIN cor_mob_img_pers_phy cpp ON m.id_mobilier_image = cpp.mobilier_image_id
         LEFT JOIN cor_monu_lieu_mob_img cmi ON m.id_mobilier_image = cmi.mobilier_image_id
WHERE (cardinality($1::int[]) = 0 OR csm.siecle_mob_img_id = ANY ($1::int[]))
   OR (cardinality($2::int[]) = 0 OR cnm.nature_id = ANY ($2::int[]))
   OR (cardinality($3::int[]) = 0 OR ctm.technique_id = ANY ($3::int[]))
   OR (cardinality($4::int[]) = 0 OR cel.etat_cons_mob_img_id = ANY ($4::int[]))
   OR (cardinality($5::int[]) = 0 OR
       caf.auteur_fiche_mob_img_id = ANY ($5::int[]))
   OR (cardinality($6::int[]) = 0 OR cml.materiau_mob_img_id = ANY ($6::int[]))
   OR (cardinality($7::int[]) = 0 OR cpm.pers_morale_id = ANY ($7::int[]))
   OR (cardinality($8::int[]) = 0 OR cpp.pers_physique_id = ANY ($8::int[]))
   OR (cardinality($9::int[]) = 0 OR cmi.monument_lieu_id = ANY ($9::int[]))
   OR (cardinality($10::int[]) = 0 OR c.id_commune = ANY ($10::int[]))
   OR (cardinality($11::int[]) = 0 OR d.id_departement = ANY ($11::int[]))
   OR (cardinality($12::int[]) = 0 OR r.id_region = ANY ($12::int[]))
   OR (cardinality($13::int[]) = 0 OR p.id_pays = ANY ($13::int[]))
GROUP BY m.id_mobilier_image
ORDER BY m.id_mobilier_image
LIMIT $15 OFFSET $14
`

type GetFilteredMobiliersImagesParams struct {
	Siecles      []int32
	Natures      []int32
	Techniques   []int32
	Etats        []int32
	AuteursFiche []int32
	Materiaux    []int32
	PersMo       []int32
	PersPhy      []int32
	Places       []int32
	Cities       []int32
	Departments  []int32
	Regions      []int32
	Pays         []int32
	OffsetParam  int32
	LimitParam   int32
}

type GetFilteredMobiliersImagesRow struct {
	ID      int32
	Title   string
	Siecles interface{}
	Natures interface{}
	Medias  interface{}
}

func (q *Queries) GetFilteredMobiliersImages(ctx context.Context, arg GetFilteredMobiliersImagesParams) ([]GetFilteredMobiliersImagesRow, error) {
	rows, err := q.db.Query(ctx, getFilteredMobiliersImages,
		arg.Siecles,
		arg.Natures,
		arg.Techniques,
		arg.Etats,
		arg.AuteursFiche,
		arg.Materiaux,
		arg.PersMo,
		arg.PersPhy,
		arg.Places,
		arg.Cities,
		arg.Departments,
		arg.Regions,
		arg.Pays,
		arg.OffsetParam,
		arg.LimitParam,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetFilteredMobiliersImagesRow
	for rows.Next() {
		var i GetFilteredMobiliersImagesRow
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Siecles,
			&i.Natures,
			&i.Medias,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getMobilierImageByID = `-- name: GetMobilierImageByID :one
SELECT m.id_mobilier_image AS id,
       m.titre_mob_img     AS title,
       m.description,
       m.historique,
       m.bibliographie,
       m.inscriptions,
       m.date_cr_ation,
       m.date_maj,
       m.publie,
       m.contributeurs,
       m.source,
       m.protection,
       m.protection_commentaires,
       m.lieu_conservation,
       m.lieu_origine,
       -- Redacteurs (auteurs fiche)
       COALESCE(array_agg(DISTINCT baf.auteur_fiche_nom) FILTER (WHERE baf.auteur_fiche_nom IS NOT NULL),
                '{}')      AS redacteurs,
       -- Commune
       c.nom_commune       AS commune,
       -- Département
       d.nom_departement   AS departement,
       -- Région
       r.nom_region        AS region,
       -- Pays
       p.nom_pays          AS pays,
       -- États de conservation
       COALESCE(array_agg(DISTINCT bec.etat_conservation_type) FILTER (WHERE bec.etat_conservation_type IS NOT NULL),
                '{}')      AS etats_conservation,
       -- Matériaux
       COALESCE(array_agg(DISTINCT bm.materiau_type) FILTER (WHERE bm.materiau_type IS NOT NULL),
                '{}')      AS materiaux,
       -- Techniques
       COALESCE(array_agg(DISTINCT bmt.technique_type) FILTER (WHERE bmt.technique_type IS NOT NULL),
                '{}')      AS techniques,
       -- Natures
       COALESCE(array_agg(DISTINCT bmn.nature_type) FILTER (WHERE bmn.nature_type IS NOT NULL),
                '{}')      AS natures,
       -- Médias
       COALESCE(
                       jsonb_agg(
                       DISTINCT jsonb_build_object(
                               'id', tm.id_media,
                               'titre', tm.titre_media
                                )
                                ) FILTER (
                           WHERE tm.chemin_media IS NOT NULL
                       AND tm.chemin_media <> ''
                       AND tm.chemin_media <> '[]'
                       AND EXISTS (SELECT 1
                                   FROM jsonb_array_elements(tm.chemin_media::jsonb) AS elem
                                   WHERE COALESCE(elem ->> 'path', '') <> '')
                           ),
                       '[]'::jsonb
       )                   AS medias,
       -- Monuments lieux (IDs uniquement)
       COALESCE(array_agg(DISTINCT cmi.monument_lieu_id) FILTER (WHERE cmi.monument_lieu_id IS NOT NULL),
                '{}')      AS monuments_lieux_liees,
       -- Personnes morales (IDs uniquement)
       COALESCE(array_agg(DISTINCT cpm.pers_morale_id) FILTER (WHERE cpm.pers_morale_id IS NOT NULL),
                '{}')      AS personnes_morales_liees,
       -- Personnes physiques (IDs uniquement)
       COALESCE(array_agg(DISTINCT cpp.pers_physique_id) FILTER (WHERE cpp.pers_physique_id IS NOT NULL),
                '{}')      AS personnes_physiques_liees,
       -- Siècles
       COALESCE(array_agg(DISTINCT bs.siecle_list) FILTER (WHERE bs.siecle_list IS NOT NULL),
                '{}')      AS siecles,
       -- Themes
       COALESCE(array_agg(DISTINCT t.theme_type) FILTER (WHERE t.theme_type IS NOT NULL),
                '{}')      AS themes,
       publication_status,
       parent_id
FROM t_mobiliers_images m
         LEFT JOIN cor_auteur_fiche_mob_img caf ON m.id_mobilier_image = caf.mobilier_image_id
         LEFT JOIN bib_auteurs baf ON caf.auteur_fiche_mob_img_id = baf.id_auteur_fiche
         LEFT JOIN loc_communes c ON m.id_commune = c.id_commune
         LEFT JOIN loc_departements d ON c.id_departement = d.id_departement
         LEFT JOIN loc_regions r ON d.id_region = r.id_region
         LEFT JOIN loc_pays p ON r.id_pays = p.id_pays
         LEFT JOIN cor_techniques_mob_img ctm ON m.id_mobilier_image = ctm.mobilier_image_id
         LEFT JOIN bib_mob_img_techniques bmt ON bmt.id_technique = ctm.technique_id
         LEFT JOIN cor_etat_cons_mob_img cec ON m.id_mobilier_image = cec.mobilier_image_id
         LEFT JOIN bib_etats_conservation bec ON cec.etat_cons_mob_img_id = bec.id_etat_conservation
         LEFT JOIN cor_materiaux_mob_img cm ON m.id_mobilier_image = cm.mobilier_image_id
         LEFT JOIN bib_materiaux bm ON cm.materiau_mob_img_id = bm.id_materiau
         LEFT JOIN cor_medias_mob_img cmm ON m.id_mobilier_image = cmm.mobilier_image_id
         LEFT JOIN cor_natures_mob_img cnm ON m.id_mobilier_image = cnm.mobilier_image_id
         LEFT JOIN bib_mob_img_natures bmn ON cnm.nature_id = bmn.id_nature
         LEFT JOIN t_medias tm ON cmm.media_mob_img_id = tm.id_media
         LEFT JOIN cor_monu_lieu_mob_img cmi ON m.id_mobilier_image = cmi.mobilier_image_id
         LEFT JOIN cor_mob_img_pers_mo cpm ON m.id_mobilier_image = cpm.mobilier_image_id
         LEFT JOIN cor_mob_img_pers_phy cpp ON m.id_mobilier_image = cpp.mobilier_image_id
         LEFT JOIN cor_siecles_mob_img csl ON m.id_mobilier_image = csl.mobilier_image_id
         LEFT JOIN bib_siecle bs ON csl.siecle_mob_img_id = bs.id_siecle
         LEFT JOIN cor_themes_mob_img ctmi ON m.id_mobilier_image = ctmi.mob_img_id
         LEFT JOIN t_themes t ON t.id_theme = ctmi.theme_id
WHERE m.id_mobilier_image = $1
GROUP BY m.id_mobilier_image,
         c.nom_commune,
         d.nom_departement,
         r.nom_region,
         p.nom_pays
`

type GetMobilierImageByIDRow struct {
	ID                      int32
	Title                   string
	Description             pgtype.Text
	Historique              pgtype.Text
	Bibliographie           pgtype.Text
	Inscriptions            pgtype.Text
	DateCrAtion             pgtype.Date
	DateMaj                 pgtype.Date
	Publie                  pgtype.Bool
	Contributeurs           pgtype.Text
	Source                  pgtype.Text
	Protection              pgtype.Bool
	ProtectionCommentaires  pgtype.Text
	LieuConservation        pgtype.Text
	LieuOrigine             pgtype.Text
	Redacteurs              interface{}
	Commune                 pgtype.Text
	Departement             pgtype.Text
	Region                  pgtype.Text
	Pays                    pgtype.Text
	EtatsConservation       interface{}
	Materiaux               interface{}
	Techniques              interface{}
	Natures                 interface{}
	Medias                  interface{}
	MonumentsLieuxLiees     interface{}
	PersonnesMoralesLiees   interface{}
	PersonnesPhysiquesLiees interface{}
	Siecles                 interface{}
	Themes                  interface{}
	PublicationStatus       PublicationStatus
	ParentID                pgtype.Int4
}

func (q *Queries) GetMobilierImageByID(ctx context.Context, idMobilierImage int32) (GetMobilierImageByIDRow, error) {
	row := q.db.QueryRow(ctx, getMobilierImageByID, idMobilierImage)
	var i GetMobilierImageByIDRow
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.Historique,
		&i.Bibliographie,
		&i.Inscriptions,
		&i.DateCrAtion,
		&i.DateMaj,
		&i.Publie,
		&i.Contributeurs,
		&i.Source,
		&i.Protection,
		&i.ProtectionCommentaires,
		&i.LieuConservation,
		&i.LieuOrigine,
		&i.Redacteurs,
		&i.Commune,
		&i.Departement,
		&i.Region,
		&i.Pays,
		&i.EtatsConservation,
		&i.Materiaux,
		&i.Techniques,
		&i.Natures,
		&i.Medias,
		&i.MonumentsLieuxLiees,
		&i.PersonnesMoralesLiees,
		&i.PersonnesPhysiquesLiees,
		&i.Siecles,
		&i.Themes,
		&i.PublicationStatus,
		&i.ParentID,
	)
	return i, err
}

const getPendingMobiliersImages = `-- name: GetPendingMobiliersImages :many
SELECT m.id_mobilier_image    AS id,
       m.titre_mob_img        AS title,
       m.description,
       m.historique,
       m.bibliographie,
       m.inscriptions,
       m.date_cr_ation,
       m.date_maj,
       m.publie,
       m.contributeurs,
       m.source,
       m.protection,
       m.protection_commentaires,
       m.lieu_conservation,
       m.lieu_origine,
       -- Redacteurs (auteurs fiche)
       COALESCE(array_agg(DISTINCT baf.auteur_fiche_nom) FILTER (WHERE baf.auteur_fiche_nom IS NOT NULL),
                '{}')         AS redacteurs,
       -- Commune
       MAX(c.nom_commune)     AS commune,
       -- Département
       MAX(d.nom_departement) AS departement,
       -- Région
       MAX(r.nom_region)      AS region,
       -- Pays
       MAX(p.nom_pays)        AS pays,
       -- États de conservation
       COALESCE(array_agg(DISTINCT bec.etat_conservation_type) FILTER (WHERE bec.etat_conservation_type IS NOT NULL),
                '{}')         AS etats_conservation,
       -- Matériaux
       COALESCE(array_agg(DISTINCT bm.materiau_type) FILTER (WHERE bm.materiau_type IS NOT NULL),
                '{}')         AS materiaux,
       -- Techniques
       COALESCE(array_agg(DISTINCT bmt.technique_type) FILTER (WHERE bmt.technique_type IS NOT NULL),
                '{}')         AS techniques,
       -- Natures
       COALESCE(array_agg(DISTINCT bmn.nature_type) FILTER (WHERE bmn.nature_type IS NOT NULL),
                '{}')         AS natures,
       -- Médias
       COALESCE(
                       jsonb_agg(
                       DISTINCT jsonb_build_object(
                               'id', tm.id_media,
                               'titre', tm.titre_media
                                )
                                ) FILTER (
                           WHERE tm.chemin_media IS NOT NULL
                       AND tm.chemin_media <> ''
                       AND tm.chemin_media <> '[]'
                       AND EXISTS (SELECT 1
                                   FROM jsonb_array_elements(tm.chemin_media::jsonb) AS elem
                                   WHERE COALESCE(elem ->> 'path', '') <> '')
                           ),
                       '[]'::jsonb
       )                      AS medias,
       -- Monuments lieux (IDs uniquement)
       COALESCE(array_agg(DISTINCT cmi.monument_lieu_id) FILTER (WHERE cmi.monument_lieu_id IS NOT NULL),
                '{}')         AS monuments_lieux_liees,
       -- Personnes morales (IDs uniquement)
       COALESCE(array_agg(DISTINCT cpm.pers_morale_id) FILTER (WHERE cpm.pers_morale_id IS NOT NULL),
                '{}')         AS personnes_morales_liees,
       -- Personnes physiques (IDs uniquement)
       COALESCE(array_agg(DISTINCT cpp.pers_physique_id) FILTER (WHERE cpp.pers_physique_id IS NOT NULL),
                '{}')         AS personnes_physiques_liees,
       -- Siècles
       COALESCE(array_agg(DISTINCT bs.siecle_list) FILTER (WHERE bs.siecle_list IS NOT NULL),
                '{}')         AS siecles,
       -- Themes
       COALESCE(array_agg(DISTINCT t.theme_type) FILTER (WHERE t.theme_type IS NOT NULL),
                '{}')         AS themes
FROM t_mobiliers_images m
         LEFT JOIN cor_auteur_fiche_mob_img caf ON m.id_mobilier_image = caf.mobilier_image_id
         LEFT JOIN bib_auteurs baf ON caf.auteur_fiche_mob_img_id = baf.id_auteur_fiche
         LEFT JOIN loc_communes c ON m.id_commune = c.id_commune
         LEFT JOIN loc_departements d ON c.id_departement = d.id_departement
         LEFT JOIN loc_regions r ON d.id_region = r.id_region
         LEFT JOIN loc_pays p ON r.id_pays = p.id_pays
         LEFT JOIN cor_techniques_mob_img ctm ON m.id_mobilier_image = ctm.mobilier_image_id
         LEFT JOIN bib_mob_img_techniques bmt ON bmt.id_technique = ctm.technique_id
         LEFT JOIN cor_etat_cons_mob_img cec ON m.id_mobilier_image = cec.mobilier_image_id
         LEFT JOIN bib_etats_conservation bec ON cec.etat_cons_mob_img_id = bec.id_etat_conservation
         LEFT JOIN cor_materiaux_mob_img cm ON m.id_mobilier_image = cm.mobilier_image_id
         LEFT JOIN bib_materiaux bm ON cm.materiau_mob_img_id = bm.id_materiau
         LEFT JOIN cor_medias_mob_img cmm ON m.id_mobilier_image = cmm.mobilier_image_id
         LEFT JOIN cor_natures_mob_img cnm ON m.id_mobilier_image = cnm.mobilier_image_id
         LEFT JOIN bib_mob_img_natures bmn ON cnm.nature_id = bmn.id_nature
         LEFT JOIN t_medias tm ON cmm.media_mob_img_id = tm.id_media
         LEFT JOIN cor_monu_lieu_mob_img cmi ON m.id_mobilier_image = cmi.mobilier_image_id
         LEFT JOIN cor_mob_img_pers_mo cpm ON m.id_mobilier_image = cpm.mobilier_image_id
         LEFT JOIN cor_mob_img_pers_phy cpp ON m.id_mobilier_image = cpp.mobilier_image_id
         LEFT JOIN cor_siecles_mob_img csl ON m.id_mobilier_image = csl.mobilier_image_id
         LEFT JOIN bib_siecle bs ON csl.siecle_mob_img_id = bs.id_siecle
         LEFT JOIN cor_themes_mob_img ctmi ON m.id_mobilier_image = ctmi.mob_img_id
         LEFT JOIN t_themes t ON t.id_theme = ctmi.theme_id
WHERE m.publication_status = 'DRAFT'
   OR m.publication_status = 'PENDING'
GROUP BY m.id_mobilier_image
`

type GetPendingMobiliersImagesRow struct {
	ID                      int32
	Title                   string
	Description             pgtype.Text
	Historique              pgtype.Text
	Bibliographie           pgtype.Text
	Inscriptions            pgtype.Text
	DateCrAtion             pgtype.Date
	DateMaj                 pgtype.Date
	Publie                  pgtype.Bool
	Contributeurs           pgtype.Text
	Source                  pgtype.Text
	Protection              pgtype.Bool
	ProtectionCommentaires  pgtype.Text
	LieuConservation        pgtype.Text
	LieuOrigine             pgtype.Text
	Redacteurs              interface{}
	Commune                 interface{}
	Departement             interface{}
	Region                  interface{}
	Pays                    interface{}
	EtatsConservation       interface{}
	Materiaux               interface{}
	Techniques              interface{}
	Natures                 interface{}
	Medias                  interface{}
	MonumentsLieuxLiees     interface{}
	PersonnesMoralesLiees   interface{}
	PersonnesPhysiquesLiees interface{}
	Siecles                 interface{}
	Themes                  interface{}
}

func (q *Queries) GetPendingMobiliersImages(ctx context.Context) ([]GetPendingMobiliersImagesRow, error) {
	rows, err := q.db.Query(ctx, getPendingMobiliersImages)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetPendingMobiliersImagesRow
	for rows.Next() {
		var i GetPendingMobiliersImagesRow
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.Historique,
			&i.Bibliographie,
			&i.Inscriptions,
			&i.DateCrAtion,
			&i.DateMaj,
			&i.Publie,
			&i.Contributeurs,
			&i.Source,
			&i.Protection,
			&i.ProtectionCommentaires,
			&i.LieuConservation,
			&i.LieuOrigine,
			&i.Redacteurs,
			&i.Commune,
			&i.Departement,
			&i.Region,
			&i.Pays,
			&i.EtatsConservation,
			&i.Materiaux,
			&i.Techniques,
			&i.Natures,
			&i.Medias,
			&i.MonumentsLieuxLiees,
			&i.PersonnesMoralesLiees,
			&i.PersonnesPhysiquesLiees,
			&i.Siecles,
			&i.Themes,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const linkMobImgToMonuLieu = `-- name: LinkMobImgToMonuLieu :exec
INSERT INTO cor_monu_lieu_mob_img
    (mobilier_image_id, monument_lieu_id)
SELECT $1, unnest($2::int[])
`

type LinkMobImgToMonuLieuParams struct {
	ID          int32
	MonuLieuIds []int32
}

func (q *Queries) LinkMobImgToMonuLieu(ctx context.Context, arg LinkMobImgToMonuLieuParams) error {
	_, err := q.db.Exec(ctx, linkMobImgToMonuLieu, arg.ID, arg.MonuLieuIds)
	return err
}

const linkMobImgToPersMo = `-- name: LinkMobImgToPersMo :exec
INSERT INTO cor_mob_img_pers_mo
    (mobilier_image_id, pers_morale_id)
SELECT $1, unnest($2::int[])
`

type LinkMobImgToPersMoParams struct {
	ID         int32
	PersoMoIds []int32
}

func (q *Queries) LinkMobImgToPersMo(ctx context.Context, arg LinkMobImgToPersMoParams) error {
	_, err := q.db.Exec(ctx, linkMobImgToPersMo, arg.ID, arg.PersoMoIds)
	return err
}

const linkMobImgToPersPhy = `-- name: LinkMobImgToPersPhy :exec
INSERT INTO cor_mob_img_pers_phy
    (mobilier_image_id, pers_physique_id)
SELECT $1, unnest($2::int[])
`

type LinkMobImgToPersPhyParams struct {
	ID          int32
	PersoPhyIds []int32
}

func (q *Queries) LinkMobImgToPersPhy(ctx context.Context, arg LinkMobImgToPersPhyParams) error {
	_, err := q.db.Exec(ctx, linkMobImgToPersPhy, arg.ID, arg.PersoPhyIds)
	return err
}

const unlinkMobImgFromMonuLieu = `-- name: UnlinkMobImgFromMonuLieu :exec
DELETE
FROM cor_monu_lieu_mob_img
WHERE mobilier_image_id = $1
`

func (q *Queries) UnlinkMobImgFromMonuLieu(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, unlinkMobImgFromMonuLieu, id)
	return err
}

const unlinkMobImgFromPersMo = `-- name: UnlinkMobImgFromPersMo :exec
DELETE
FROM cor_mob_img_pers_mo
WHERE mobilier_image_id = $1
`

func (q *Queries) UnlinkMobImgFromPersMo(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, unlinkMobImgFromPersMo, id)
	return err
}

const unlinkMobImgFromPersPhy = `-- name: UnlinkMobImgFromPersPhy :exec
DELETE
FROM cor_mob_img_pers_phy
WHERE mobilier_image_id = $1
`

func (q *Queries) UnlinkMobImgFromPersPhy(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, unlinkMobImgFromPersPhy, id)
	return err
}

const validatePendingMobilierImage = `-- name: ValidatePendingMobilierImage :exec
UPDATE t_mobiliers_images
SET publication_status = 'PUBLISHED',
    publie             = true,
    parent_id          = NULL
WHERE id_mobilier_image = $1
`

func (q *Queries) ValidatePendingMobilierImage(ctx context.Context, idMobilierImage int32) error {
	_, err := q.db.Exec(ctx, validatePendingMobilierImage, idMobilierImage)
	return err
}
