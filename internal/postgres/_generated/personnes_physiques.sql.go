// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: personnes_physiques.sql

package queries

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const attachAuthorToPersPhy = `-- name: AttachAuthorToPersPhy :exec
INSERT INTO cor_auteur_fiche_pers_phy
    (auteur_fiche_pers_phy_id, pers_physique_id)
VALUES ($1, $2)
`

type AttachAuthorToPersPhyParams struct {
	AuteurID int32
	ID       int32
}

func (q *Queries) AttachAuthorToPersPhy(ctx context.Context, arg AttachAuthorToPersPhyParams) error {
	_, err := q.db.Exec(ctx, attachAuthorToPersPhy, arg.AuteurID, arg.ID)
	return err
}

const attachHistoricalPeriodsToPersPhy = `-- name: AttachHistoricalPeriodsToPersPhy :exec
INSERT INTO cor_periodes_historiques_pers_phy (periode_historique_id, pers_physique_id)
SELECT unnest($1::int[]), $2
`

type AttachHistoricalPeriodsToPersPhyParams struct {
	PeriodeIds []int32
	ID         int32
}

func (q *Queries) AttachHistoricalPeriodsToPersPhy(ctx context.Context, arg AttachHistoricalPeriodsToPersPhyParams) error {
	_, err := q.db.Exec(ctx, attachHistoricalPeriodsToPersPhy, arg.PeriodeIds, arg.ID)
	return err
}

const attachMediasToPersPhy = `-- name: AttachMediasToPersPhy :exec
INSERT INTO cor_medias_pers_phy
    (media_pers_phy_id, pers_physique_id)
SELECT unnest($1::int[]), $2
`

type AttachMediasToPersPhyParams struct {
	MediaIds []int32
	ID       int32
}

func (q *Queries) AttachMediasToPersPhy(ctx context.Context, arg AttachMediasToPersPhyParams) error {
	_, err := q.db.Exec(ctx, attachMediasToPersPhy, arg.MediaIds, arg.ID)
	return err
}

const attachModeDeTransportsToPersPhy = `-- name: AttachModeDeTransportsToPersPhy :exec
INSERT INTO cor_modes_deplacements_pers_phy (mode_deplacement_id, pers_physique_id)
SELECT unnest($1::int[]), $2
`

type AttachModeDeTransportsToPersPhyParams struct {
	TravelIds []int32
	ID        int32
}

func (q *Queries) AttachModeDeTransportsToPersPhy(ctx context.Context, arg AttachModeDeTransportsToPersPhyParams) error {
	_, err := q.db.Exec(ctx, attachModeDeTransportsToPersPhy, arg.TravelIds, arg.ID)
	return err
}

const attachProfessionsToPersPhy = `-- name: AttachProfessionsToPersPhy :exec
INSERT INTO cor_professions_pers_phy (profession_id, pers_physique_id)
SELECT unnest($1::int[]), $2
`

type AttachProfessionsToPersPhyParams struct {
	ProfessionIds []int32
	ID            int32
}

func (q *Queries) AttachProfessionsToPersPhy(ctx context.Context, arg AttachProfessionsToPersPhyParams) error {
	_, err := q.db.Exec(ctx, attachProfessionsToPersPhy, arg.ProfessionIds, arg.ID)
	return err
}

const attachSieclesToPersPhy = `-- name: AttachSieclesToPersPhy :exec
INSERT INTO cor_siecles_pers_phy
    (siecle_pers_phy_id, pers_physique_id)
SELECT unnest($1::int[]), $2
`

type AttachSieclesToPersPhyParams struct {
	SiecleID []int32
	ID       int32
}

func (q *Queries) AttachSieclesToPersPhy(ctx context.Context, arg AttachSieclesToPersPhyParams) error {
	_, err := q.db.Exec(ctx, attachSieclesToPersPhy, arg.SiecleID, arg.ID)
	return err
}

const attachThemesToPersPhy = `-- name: AttachThemesToPersPhy :exec
INSERT INTO cor_themes_pers_phy (theme_id, pers_phy_id)
SELECT unnest($1::int[]), $2
`

type AttachThemesToPersPhyParams struct {
	ThemeIds []int32
	ID       int32
}

func (q *Queries) AttachThemesToPersPhy(ctx context.Context, arg AttachThemesToPersPhyParams) error {
	_, err := q.db.Exec(ctx, attachThemesToPersPhy, arg.ThemeIds, arg.ID)
	return err
}

const createPersPhysique = `-- name: CreatePersPhysique :one
INSERT INTO t_pers_physiques
(prenom_nom_pers_phy,
 commentaires,
 date_naissance,
 date_deces,
 attestation,
 elements_biographiques,
 elements_pelerinage,
 nature_evenement,
 commutation_voeu,
 bibliographie,
 sources,
 date_creation,
 date_maj,
 contributeurs,
 id_commune,
 id_pays,
 publie,
 publication_status,
 parent_id)
VALUES ($1,
        $2,
        $3,
        $4,
        $5,
        $6,
        $7,
        $8,
        $9,
        $10,
        $11,
        NOW(),
        NOW(),
        $12,
        $13,
        $14,
        false,
        'DRAFT',
        $15)
RETURNING id_pers_physique
`

type CreatePersPhysiqueParams struct {
	PrenomNomPersPhy      pgtype.Text
	Commentaires          pgtype.Text
	DateNaissance         pgtype.Text
	DateDeces             pgtype.Text
	Attestation           pgtype.Text
	ElementsBiographiques pgtype.Text
	ElementsPelerinage    pgtype.Text
	NatureEvenement       pgtype.Text
	CommutationVoeu       pgtype.Text
	Bibliographie         pgtype.Text
	Sources               pgtype.Text
	Contributeurs         pgtype.Text
	IDCommune             pgtype.Int4
	IDPays                pgtype.Int4
	ParentID              pgtype.Int4
}

func (q *Queries) CreatePersPhysique(ctx context.Context, arg CreatePersPhysiqueParams) (int32, error) {
	row := q.db.QueryRow(ctx, createPersPhysique,
		arg.PrenomNomPersPhy,
		arg.Commentaires,
		arg.DateNaissance,
		arg.DateDeces,
		arg.Attestation,
		arg.ElementsBiographiques,
		arg.ElementsPelerinage,
		arg.NatureEvenement,
		arg.CommutationVoeu,
		arg.Bibliographie,
		arg.Sources,
		arg.Contributeurs,
		arg.IDCommune,
		arg.IDPays,
		arg.ParentID,
	)
	var id_pers_physique int32
	err := row.Scan(&id_pers_physique)
	return id_pers_physique, err
}

const deletePendingPersonnePhysique = `-- name: DeletePendingPersonnePhysique :exec
DELETE
FROM t_pers_physiques
WHERE id_pers_physique = $1
`

func (q *Queries) DeletePendingPersonnePhysique(ctx context.Context, idPersPhysique int32) error {
	_, err := q.db.Exec(ctx, deletePendingPersonnePhysique, idPersPhysique)
	return err
}

const detachAuthorFromPersPhy = `-- name: DetachAuthorFromPersPhy :exec
DELETE
FROM cor_auteur_fiche_pers_phy
WHERE pers_physique_id = $1
`

func (q *Queries) DetachAuthorFromPersPhy(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, detachAuthorFromPersPhy, id)
	return err
}

const detachHistoricalPeriodsFromPersPhy = `-- name: DetachHistoricalPeriodsFromPersPhy :exec
DELETE
FROM cor_periodes_historiques_pers_phy
WHERE pers_physique_id = $1
`

func (q *Queries) DetachHistoricalPeriodsFromPersPhy(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, detachHistoricalPeriodsFromPersPhy, id)
	return err
}

const detachMediasFromPersPhy = `-- name: DetachMediasFromPersPhy :exec
DELETE
FROM cor_medias_pers_phy
WHERE pers_physique_id = $1
`

func (q *Queries) DetachMediasFromPersPhy(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, detachMediasFromPersPhy, id)
	return err
}

const detachModeDeTransportsFromPersPhy = `-- name: DetachModeDeTransportsFromPersPhy :exec
DELETE
FROM cor_modes_deplacements_pers_phy
WHERE pers_physique_id = $1
`

func (q *Queries) DetachModeDeTransportsFromPersPhy(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, detachModeDeTransportsFromPersPhy, id)
	return err
}

const detachProfessionsFromPersPhy = `-- name: DetachProfessionsFromPersPhy :exec
DELETE
FROM cor_professions_pers_phy
WHERE pers_physique_id = $1
`

func (q *Queries) DetachProfessionsFromPersPhy(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, detachProfessionsFromPersPhy, id)
	return err
}

const detachSieclesFromPersPhy = `-- name: DetachSieclesFromPersPhy :exec
DELETE
FROM cor_siecles_pers_phy
WHERE pers_physique_id = $1
`

func (q *Queries) DetachSieclesFromPersPhy(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, detachSieclesFromPersPhy, id)
	return err
}

const detachThemesFromPersPhy = `-- name: DetachThemesFromPersPhy :exec
DELETE
FROM cor_themes_pers_phy
WHERE pers_phy_id = $1
`

func (q *Queries) DetachThemesFromPersPhy(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, detachThemesFromPersPhy, id)
	return err
}

const getFilteredPersonnesPhysiques = `-- name: GetFilteredPersonnesPhysiques :many
SELECT p.id_pers_physique                                                                             AS id,
       p.prenom_nom_pers_phy                                                                          AS firstname,
       COALESCE(array_agg(DISTINCT bs.siecle_list) FILTER (WHERE bs.siecle_list IS NOT NULL),
                '{}')                                                                                 AS siecles,
       COALESCE(array_agg(DISTINCT bpp.profession_type) FILTER (WHERE bpp.profession_type IS NOT NULL),
                '{}')                                                                                 AS professions,
       COALESCE(array_agg(DISTINCT tm.chemin_media) FILTER (WHERE tm.chemin_media IS NOT NULL), '{}') AS medias
FROM t_pers_physiques p
         LEFT JOIN cor_siecles_pers_phy csp ON p.id_pers_physique = csp.pers_physique_id
         LEFT JOIN bib_siecle bs ON bs.id_siecle = csp.siecle_pers_phy_id

         LEFT JOIN cor_professions_pers_phy cpp ON p.id_pers_physique = cpp.pers_physique_id
         LEFT JOIN bib_pers_phy_professions bpp ON bpp.id_profession = cpp.profession_id

         LEFT JOIN cor_medias_pers_phy cmp ON p.id_pers_physique = cmp.pers_physique_id
         LEFT JOIN t_medias tm ON tm.id_media = cmp.media_pers_phy_id

         LEFT JOIN loc_communes c ON p.id_commune = c.id_commune
         LEFT JOIN loc_departements d ON c.id_departement = d.id_departement
         LEFT JOIN loc_regions r ON d.id_region = r.id_region
         LEFT JOIN loc_pays pa ON r.id_pays = pa.id_pays

         LEFT JOIN cor_auteur_fiche_pers_phy caf ON p.id_pers_physique = caf.pers_physique_id
         LEFT JOIN cor_mob_img_pers_phy cpm ON p.id_pers_physique = cpm.pers_physique_id
         LEFT JOIN cor_pers_phy_pers_mo cpmo ON p.id_pers_physique = cpmo.pers_morale_id
         LEFT JOIN cor_monu_lieu_pers_phy cmi ON p.id_pers_physique = cmi.pers_phy_id
WHERE (cardinality($1::int[]) = 0 OR csp.siecle_pers_phy_id = ANY ($1::int[]))
   OR (cardinality($2::int[]) = 0 OR cpp.profession_id = ANY ($2::int[]))
   OR (cardinality($3::int[]) = 0 OR
       caf.auteur_fiche_pers_phy_id = ANY ($3::int[]))
   OR (cardinality($4::int[]) = 0 OR cpp.pers_physique_id = ANY ($4::int[]))
   OR (cardinality($5::int[]) = 0 OR cmi.monu_lieu_id = ANY ($5::int[]))
   OR (cardinality($6::int[]) = 0 OR cpm.mobilier_image_id = ANY ($6::int[]))
   OR (cardinality($7::int[]) = 0 OR c.id_commune = ANY ($7::int[]))
   OR (cardinality($8::int[]) = 0 OR d.id_departement = ANY ($8::int[]))
   OR (cardinality($9::int[]) = 0 OR r.id_region = ANY ($9::int[]))
   OR (cardinality($10::int[]) = 0 OR pa.id_pays = ANY ($10::int[]))
GROUP BY p.id_pers_physique
ORDER BY p.id_pers_physique
LIMIT $12 OFFSET $11
`

type GetFilteredPersonnesPhysiquesParams struct {
	Siecles      []int32
	Professions  []int32
	AuteursFiche []int32
	PersMo       []int32
	Places       []int32
	Furniture    []int32
	Cities       []int32
	Departments  []int32
	Regions      []int32
	Pays         []int32
	OffsetParam  int32
	LimitParam   int32
}

type GetFilteredPersonnesPhysiquesRow struct {
	ID          int32
	Firstname   pgtype.Text
	Siecles     interface{}
	Professions interface{}
	Medias      interface{}
}

func (q *Queries) GetFilteredPersonnesPhysiques(ctx context.Context, arg GetFilteredPersonnesPhysiquesParams) ([]GetFilteredPersonnesPhysiquesRow, error) {
	rows, err := q.db.Query(ctx, getFilteredPersonnesPhysiques,
		arg.Siecles,
		arg.Professions,
		arg.AuteursFiche,
		arg.PersMo,
		arg.Places,
		arg.Furniture,
		arg.Cities,
		arg.Departments,
		arg.Regions,
		arg.Pays,
		arg.OffsetParam,
		arg.LimitParam,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetFilteredPersonnesPhysiquesRow
	for rows.Next() {
		var i GetFilteredPersonnesPhysiquesRow
		if err := rows.Scan(
			&i.ID,
			&i.Firstname,
			&i.Siecles,
			&i.Professions,
			&i.Medias,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPendingPersonnesPhysiques = `-- name: GetPendingPersonnesPhysiques :many
SELECT p.id_pers_physique     AS id,
       p.prenom_nom_pers_phy  AS firstname,
       p.date_naissance,
       p.date_deces,
       p.attestation,
       -- Periode historique
       COALESCE(array_agg(DISTINCT bph.periode_historique_type) FILTER (WHERE bph.periode_historique_type IS NOT NULL),
                '{}')         AS historical_period,
       p.bibliographie,
       p.elements_biographiques,
       p.elements_pelerinage,
       p.commutation_voeu,
       p.sources,
       p.date_creation,
       p.date_maj,
       p.publie,
       p.contributeurs,
       p.commentaires,
       -- Redacteurs (auteurs fiche)
       COALESCE(array_agg(DISTINCT baf.auteur_fiche_nom) FILTER (WHERE baf.auteur_fiche_nom IS NOT NULL),
                '{}')         AS redacteurs,
       -- Commune
       MAX(c.nom_commune)     AS commune,
       -- Département
       MAX(d.nom_departement) AS departement,
       -- Région
       MAX(r.nom_region)      AS region,
       -- Pays
       MAX(pa.nom_pays)       AS pays,
       -- Travels
       COALESCE(array_agg(DISTINCT bmd.mode_deplacement_type) FILTER (WHERE bmd.mode_deplacement_type IS NOT NULL),
                '{}')         AS travels,
       -- Professions
       COALESCE(array_agg(DISTINCT bpp.profession_type) FILTER (WHERE bpp.profession_type IS NOT NULL),
                '{}')         AS professions,
       p.nature_evenement,
       -- Médias
       COALESCE(
                       jsonb_agg(
                       DISTINCT jsonb_build_object(
                               'id', tm.id_media,
                               'titre', tm.titre_media
                                )
                                ) FILTER (
                           WHERE tm.chemin_media IS NOT NULL
                       AND tm.chemin_media <> ''
                       AND tm.chemin_media <> '[]'
                       AND EXISTS (SELECT 1
                                   FROM jsonb_array_elements(tm.chemin_media::jsonb) AS elem
                                   WHERE COALESCE(elem ->> 'path', '') <> '')
                           ),
                       '[]'::jsonb
       )                      AS medias,
       -- Monuments lieux (IDs uniquement)
       COALESCE(array_agg(DISTINCT cml.monu_lieu_id) FILTER (WHERE cml.monu_lieu_id IS NOT NULL),
                '{}')         AS monuments_lieux_liees,
       -- Mobiliers images (IDs uniquement)
       COALESCE(array_agg(DISTINCT cpm.mobilier_image_id) FILTER (WHERE cpm.mobilier_image_id IS NOT NULL),
                '{}')         AS mobiliers_images_liees,
       -- Personnes morales (IDs uniquement)
       COALESCE(array_agg(DISTINCT cppmo.pers_morale_id) FILTER (WHERE cppmo.pers_morale_id IS NOT NULL),
                '{}')         AS personnes_morales_liees,
       -- Siècles
       COALESCE(array_agg(DISTINCT bs.siecle_list) FILTER (WHERE bs.siecle_list IS NOT NULL),
                '{}')         AS siecles,
       -- Themes
       COALESCE(array_agg(DISTINCT t.theme_type) FILTER (WHERE t.theme_type IS NOT NULL),
                '{}')         AS themes
FROM t_pers_physiques p
         LEFT JOIN cor_auteur_fiche_pers_phy cap ON p.id_pers_physique = cap.pers_physique_id
         LEFT JOIN bib_auteurs baf ON cap.auteur_fiche_pers_phy_id = baf.id_auteur_fiche
         LEFT JOIN loc_communes c ON p.id_commune = c.id_commune
         LEFT JOIN loc_departements d ON c.id_departement = d.id_departement
         LEFT JOIN loc_regions r ON d.id_region = r.id_region
         LEFT JOIN loc_pays pa ON r.id_pays = p.id_pays
         LEFT JOIN cor_medias_pers_phy cmp ON p.id_pers_physique = cmp.pers_physique_id
         LEFT JOIN t_medias tm ON cmp.media_pers_phy_id = tm.id_media
         LEFT JOIN cor_periodes_historiques_pers_phy cph ON p.id_pers_physique = cph.pers_physique_id
         LEFT JOIN bib_pers_phy_periodes_historiques bph ON cph.periode_historique_id = bph.id_periode_historique
         LEFT JOIN cor_modes_deplacements_pers_phy cmd ON p.id_pers_physique = cmd.pers_physique_id
         LEFT JOIN bib_pers_phy_modes_deplacements bmd ON cmd.mode_deplacement_id = bmd.id_mode_deplacement
         LEFT JOIN cor_professions_pers_phy cpp ON p.id_pers_physique = cpp.pers_physique_id
         LEFT JOIN bib_pers_phy_professions bpp ON cpp.profession_id = bpp.id_profession
         LEFT JOIN cor_monu_lieu_pers_phy cml ON p.id_pers_physique = cml.pers_phy_id
         LEFT JOIN cor_mob_img_pers_phy cpm ON p.id_pers_physique = cpm.pers_physique_id
         LEFT JOIN cor_pers_phy_pers_mo cppmo ON p.id_pers_physique = cppmo.pers_physique_id
         LEFT JOIN cor_siecles_pers_phy csp ON p.id_pers_physique = csp.pers_physique_id
         LEFT JOIN bib_siecle bs ON csp.siecle_pers_phy_id = bs.id_siecle
         LEFT JOIN cor_themes_pers_phy ctpp ON p.id_pers_physique = ctpp.pers_phy_id
         LEFT JOIN t_themes t ON t.id_theme = ctpp.theme_id
WHERE p.publication_status = 'DRAFT'
   or p.publication_status = 'PENDING'
GROUP BY p.id_pers_physique
`

type GetPendingPersonnesPhysiquesRow struct {
	ID                    int32
	Firstname             pgtype.Text
	DateNaissance         pgtype.Text
	DateDeces             pgtype.Text
	Attestation           pgtype.Text
	HistoricalPeriod      interface{}
	Bibliographie         pgtype.Text
	ElementsBiographiques pgtype.Text
	ElementsPelerinage    pgtype.Text
	CommutationVoeu       pgtype.Text
	Sources               pgtype.Text
	DateCreation          pgtype.Date
	DateMaj               pgtype.Date
	Publie                pgtype.Bool
	Contributeurs         pgtype.Text
	Commentaires          pgtype.Text
	Redacteurs            interface{}
	Commune               interface{}
	Departement           interface{}
	Region                interface{}
	Pays                  interface{}
	Travels               interface{}
	Professions           interface{}
	NatureEvenement       pgtype.Text
	Medias                interface{}
	MonumentsLieuxLiees   interface{}
	MobiliersImagesLiees  interface{}
	PersonnesMoralesLiees interface{}
	Siecles               interface{}
	Themes                interface{}
}

func (q *Queries) GetPendingPersonnesPhysiques(ctx context.Context) ([]GetPendingPersonnesPhysiquesRow, error) {
	rows, err := q.db.Query(ctx, getPendingPersonnesPhysiques)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetPendingPersonnesPhysiquesRow
	for rows.Next() {
		var i GetPendingPersonnesPhysiquesRow
		if err := rows.Scan(
			&i.ID,
			&i.Firstname,
			&i.DateNaissance,
			&i.DateDeces,
			&i.Attestation,
			&i.HistoricalPeriod,
			&i.Bibliographie,
			&i.ElementsBiographiques,
			&i.ElementsPelerinage,
			&i.CommutationVoeu,
			&i.Sources,
			&i.DateCreation,
			&i.DateMaj,
			&i.Publie,
			&i.Contributeurs,
			&i.Commentaires,
			&i.Redacteurs,
			&i.Commune,
			&i.Departement,
			&i.Region,
			&i.Pays,
			&i.Travels,
			&i.Professions,
			&i.NatureEvenement,
			&i.Medias,
			&i.MonumentsLieuxLiees,
			&i.MobiliersImagesLiees,
			&i.PersonnesMoralesLiees,
			&i.Siecles,
			&i.Themes,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPersonnePhysiqueByID = `-- name: GetPersonnePhysiqueByID :one
SELECT p.id_pers_physique    AS id,
       p.prenom_nom_pers_phy AS firstname,
       p.date_naissance,
       p.date_deces,
       p.attestation,
       -- Periode historique
       COALESCE(array_agg(DISTINCT bph.periode_historique_type) FILTER (WHERE bph.periode_historique_type IS NOT NULL),
                '{}')        AS historical_period,
       p.bibliographie,
       p.elements_biographiques,
       p.elements_pelerinage,
       p.commutation_voeu,
       p.sources,
       p.date_creation,
       p.date_maj,
       p.publie,
       p.contributeurs,
       p.commentaires,
       -- Redacteurs (auteurs fiche)
       COALESCE(array_agg(DISTINCT baf.auteur_fiche_nom) FILTER (WHERE baf.auteur_fiche_nom IS NOT NULL),
                '{}')        AS redacteurs,
       -- Commune
       c.nom_commune         AS commune,
       -- Département
       d.nom_departement     AS departement,
       -- Région
       r.nom_region          AS region,
       -- Pays
       pa.nom_pays           AS pays,
       -- Travels
       COALESCE(array_agg(DISTINCT bmd.mode_deplacement_type) FILTER (WHERE bmd.mode_deplacement_type IS NOT NULL),
                '{}')        AS travels,
       -- Professions
       COALESCE(array_agg(DISTINCT bpp.profession_type) FILTER (WHERE bpp.profession_type IS NOT NULL),
                '{}')        AS professions,
       p.nature_evenement,
       -- Médias
       COALESCE(
                       jsonb_agg(
                       DISTINCT jsonb_build_object(
                               'id', tm.id_media,
                               'titre', tm.titre_media
                                )
                                ) FILTER (
                           WHERE tm.chemin_media IS NOT NULL
                       AND tm.chemin_media <> ''
                       AND tm.chemin_media <> '[]'
                       AND EXISTS (SELECT 1
                                   FROM jsonb_array_elements(tm.chemin_media::jsonb) AS elem
                                   WHERE COALESCE(elem ->> 'path', '') <> '')
                           ),
                       '[]'::jsonb
       )                     AS medias,
       -- Monuments lieux (IDs uniquement)
       COALESCE(array_agg(DISTINCT cml.monu_lieu_id) FILTER (WHERE cml.monu_lieu_id IS NOT NULL),
                '{}')        AS monuments_lieux_liees,
       -- Mobiliers images (IDs uniquement)
       COALESCE(array_agg(DISTINCT cpm.mobilier_image_id) FILTER (WHERE cpm.mobilier_image_id IS NOT NULL),
                '{}')        AS mobiliers_images_liees,
       -- Personnes morales (IDs uniquement)
       COALESCE(array_agg(DISTINCT cppmo.pers_morale_id) FILTER (WHERE cppmo.pers_morale_id IS NOT NULL),
                '{}')        AS personnes_morales_liees,
       -- Siècles
       COALESCE(array_agg(DISTINCT bs.siecle_list) FILTER (WHERE bs.siecle_list IS NOT NULL),
                '{}')        AS siecles,
       -- Themes
       COALESCE(array_agg(DISTINCT t.theme_type) FILTER (WHERE t.theme_type IS NOT NULL),
                '{}')        AS themes,
       publication_status,
       parent_id
FROM t_pers_physiques p
         LEFT JOIN cor_auteur_fiche_pers_phy cap ON p.id_pers_physique = cap.pers_physique_id
         LEFT JOIN bib_auteurs baf ON cap.auteur_fiche_pers_phy_id = baf.id_auteur_fiche
         LEFT JOIN loc_communes c ON p.id_commune = c.id_commune
         LEFT JOIN loc_departements d ON c.id_departement = d.id_departement
         LEFT JOIN loc_regions r ON d.id_region = r.id_region
         LEFT JOIN loc_pays pa ON r.id_pays = pa.id_pays
         LEFT JOIN cor_medias_pers_phy cmp ON p.id_pers_physique = cmp.pers_physique_id
         LEFT JOIN t_medias tm ON cmp.media_pers_phy_id = tm.id_media
         LEFT JOIN cor_periodes_historiques_pers_phy cph ON p.id_pers_physique = cph.pers_physique_id
         LEFT JOIN bib_pers_phy_periodes_historiques bph ON cph.periode_historique_id = bph.id_periode_historique
         LEFT JOIN cor_modes_deplacements_pers_phy cmd ON p.id_pers_physique = cmd.pers_physique_id
         LEFT JOIN bib_pers_phy_modes_deplacements bmd ON cmd.mode_deplacement_id = bmd.id_mode_deplacement
         LEFT JOIN cor_professions_pers_phy cpp ON p.id_pers_physique = cpp.pers_physique_id
         LEFT JOIN bib_pers_phy_professions bpp ON cpp.profession_id = bpp.id_profession
         LEFT JOIN cor_monu_lieu_pers_phy cml ON p.id_pers_physique = cml.pers_phy_id
         LEFT JOIN cor_mob_img_pers_phy cpm ON p.id_pers_physique = cpm.pers_physique_id
         LEFT JOIN cor_pers_phy_pers_mo cppmo ON p.id_pers_physique = cppmo.pers_physique_id
         LEFT JOIN cor_siecles_pers_phy csp ON p.id_pers_physique = csp.pers_physique_id
         LEFT JOIN bib_siecle bs ON csp.siecle_pers_phy_id = bs.id_siecle
         LEFT JOIN cor_themes_pers_phy ctpp ON p.id_pers_physique = ctpp.pers_phy_id
         LEFT JOIN t_themes t ON t.id_theme = ctpp.theme_id
WHERE p.id_pers_physique = $1
GROUP BY p.id_pers_physique,
         c.nom_commune,
         d.nom_departement,
         r.nom_region,
         pa.nom_pays
`

type GetPersonnePhysiqueByIDRow struct {
	ID                    int32
	Firstname             pgtype.Text
	DateNaissance         pgtype.Text
	DateDeces             pgtype.Text
	Attestation           pgtype.Text
	HistoricalPeriod      interface{}
	Bibliographie         pgtype.Text
	ElementsBiographiques pgtype.Text
	ElementsPelerinage    pgtype.Text
	CommutationVoeu       pgtype.Text
	Sources               pgtype.Text
	DateCreation          pgtype.Date
	DateMaj               pgtype.Date
	Publie                pgtype.Bool
	Contributeurs         pgtype.Text
	Commentaires          pgtype.Text
	Redacteurs            interface{}
	Commune               pgtype.Text
	Departement           pgtype.Text
	Region                pgtype.Text
	Pays                  pgtype.Text
	Travels               interface{}
	Professions           interface{}
	NatureEvenement       pgtype.Text
	Medias                interface{}
	MonumentsLieuxLiees   interface{}
	MobiliersImagesLiees  interface{}
	PersonnesMoralesLiees interface{}
	Siecles               interface{}
	Themes                interface{}
	PublicationStatus     PublicationStatus
	ParentID              pgtype.Int4
}

func (q *Queries) GetPersonnePhysiqueByID(ctx context.Context, idPersPhysique int32) (GetPersonnePhysiqueByIDRow, error) {
	row := q.db.QueryRow(ctx, getPersonnePhysiqueByID, idPersPhysique)
	var i GetPersonnePhysiqueByIDRow
	err := row.Scan(
		&i.ID,
		&i.Firstname,
		&i.DateNaissance,
		&i.DateDeces,
		&i.Attestation,
		&i.HistoricalPeriod,
		&i.Bibliographie,
		&i.ElementsBiographiques,
		&i.ElementsPelerinage,
		&i.CommutationVoeu,
		&i.Sources,
		&i.DateCreation,
		&i.DateMaj,
		&i.Publie,
		&i.Contributeurs,
		&i.Commentaires,
		&i.Redacteurs,
		&i.Commune,
		&i.Departement,
		&i.Region,
		&i.Pays,
		&i.Travels,
		&i.Professions,
		&i.NatureEvenement,
		&i.Medias,
		&i.MonumentsLieuxLiees,
		&i.MobiliersImagesLiees,
		&i.PersonnesMoralesLiees,
		&i.Siecles,
		&i.Themes,
		&i.PublicationStatus,
		&i.ParentID,
	)
	return i, err
}

const linkPersPhyToMobImg = `-- name: LinkPersPhyToMobImg :exec
INSERT INTO cor_mob_img_pers_phy
    (pers_physique_id, mobilier_image_id)
SELECT $1, unnest($2::int[])
`

type LinkPersPhyToMobImgParams struct {
	ID        int32
	MobImgIds []int32
}

func (q *Queries) LinkPersPhyToMobImg(ctx context.Context, arg LinkPersPhyToMobImgParams) error {
	_, err := q.db.Exec(ctx, linkPersPhyToMobImg, arg.ID, arg.MobImgIds)
	return err
}

const linkPersPhyToMonuLieu = `-- name: LinkPersPhyToMonuLieu :exec
INSERT INTO cor_monu_lieu_pers_phy
    (pers_phy_id, monu_lieu_id)
SELECT $1, unnest($2::int[])
`

type LinkPersPhyToMonuLieuParams struct {
	ID          int32
	MonuLieuIds []int32
}

func (q *Queries) LinkPersPhyToMonuLieu(ctx context.Context, arg LinkPersPhyToMonuLieuParams) error {
	_, err := q.db.Exec(ctx, linkPersPhyToMonuLieu, arg.ID, arg.MonuLieuIds)
	return err
}

const linkPersPhyToPersMo = `-- name: LinkPersPhyToPersMo :exec
INSERT INTO cor_pers_phy_pers_mo
    (pers_physique_id, pers_morale_id)
SELECT $1, unnest($2::int[])
`

type LinkPersPhyToPersMoParams struct {
	ID         int32
	PersoMoIds []int32
}

func (q *Queries) LinkPersPhyToPersMo(ctx context.Context, arg LinkPersPhyToPersMoParams) error {
	_, err := q.db.Exec(ctx, linkPersPhyToPersMo, arg.ID, arg.PersoMoIds)
	return err
}

const unlinkPersPhyFromMobImg = `-- name: UnlinkPersPhyFromMobImg :exec
DELETE
FROM cor_mob_img_pers_phy
WHERE pers_physique_id = $1
`

func (q *Queries) UnlinkPersPhyFromMobImg(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, unlinkPersPhyFromMobImg, id)
	return err
}

const unlinkPersPhyFromMonuLieu = `-- name: UnlinkPersPhyFromMonuLieu :exec
DELETE
FROM cor_monu_lieu_pers_phy
WHERE pers_phy_id = $1
`

func (q *Queries) UnlinkPersPhyFromMonuLieu(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, unlinkPersPhyFromMonuLieu, id)
	return err
}

const unlinkPersPhyFromPersMo = `-- name: UnlinkPersPhyFromPersMo :exec
DELETE
FROM cor_pers_phy_pers_mo
WHERE pers_physique_id = $1
`

func (q *Queries) UnlinkPersPhyFromPersMo(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, unlinkPersPhyFromPersMo, id)
	return err
}

const validatePendingPersonnePhysique = `-- name: ValidatePendingPersonnePhysique :exec
UPDATE t_pers_physiques
SET publication_status = 'PUBLISHED',
    publie             = true,
    parent_id          = NULL
WHERE id_pers_physique = $1
`

func (q *Queries) ValidatePendingPersonnePhysique(ctx context.Context, idPersPhysique int32) error {
	_, err := q.db.Exec(ctx, validatePendingPersonnePhysique, idPersPhysique)
	return err
}
