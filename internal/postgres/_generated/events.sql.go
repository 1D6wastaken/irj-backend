// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: events.sql

package queries

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const accountDeletionEvent = `-- name: AccountDeletionEvent :exec
INSERT INTO t_app_events (type, user_id)
VALUES ('account_deletion', $1)
`

func (q *Queries) AccountDeletionEvent(ctx context.Context, id string) error {
	_, err := q.db.Exec(ctx, accountDeletionEvent, id)
	return err
}

const contributorRegistrationEvent = `-- name: ContributorRegistrationEvent :exec
INSERT INTO t_app_events (type, user_id)
VALUES ('contributor_registration', $1)
`

func (q *Queries) ContributorRegistrationEvent(ctx context.Context, id string) error {
	_, err := q.db.Exec(ctx, contributorRegistrationEvent, id)
	return err
}

const contributorRejectionEvent = `-- name: ContributorRejectionEvent :exec
INSERT INTO t_app_events (type, user_id, admin_id)
VALUES ('contributor_rejection', $1, $2)
`

type ContributorRejectionEventParams struct {
	UserID  string
	AdminID pgtype.Text
}

func (q *Queries) ContributorRejectionEvent(ctx context.Context, arg ContributorRejectionEventParams) error {
	_, err := q.db.Exec(ctx, contributorRejectionEvent, arg.UserID, arg.AdminID)
	return err
}

const contributorValidationEvent = `-- name: ContributorValidationEvent :exec
INSERT INTO t_app_events (type, user_id, admin_id)
VALUES ('contributor_validation', $1, $2)
`

type ContributorValidationEventParams struct {
	UserID  string
	AdminID pgtype.Text
}

func (q *Queries) ContributorValidationEvent(ctx context.Context, arg ContributorValidationEventParams) error {
	_, err := q.db.Exec(ctx, contributorValidationEvent, arg.UserID, arg.AdminID)
	return err
}

const documentRejectionEvent = `-- name: DocumentRejectionEvent :exec
INSERT INTO t_app_events (type, document_id, admin_id, comment)
VALUES ('document_rejection', $1, $2, $3)
`

type DocumentRejectionEventParams struct {
	DocumentID pgtype.Int4
	AdminID    pgtype.Text
	Comment    pgtype.Text
}

func (q *Queries) DocumentRejectionEvent(ctx context.Context, arg DocumentRejectionEventParams) error {
	_, err := q.db.Exec(ctx, documentRejectionEvent, arg.DocumentID, arg.AdminID, arg.Comment)
	return err
}

const documentSubmissionEvent = `-- name: DocumentSubmissionEvent :exec
INSERT INTO t_app_events (type, user_id, document_id, comment)
VALUES ('document_submission', $1, $2, $3)
`

type DocumentSubmissionEventParams struct {
	UserID     string
	DocumentID pgtype.Int4
	Comment    pgtype.Text
}

func (q *Queries) DocumentSubmissionEvent(ctx context.Context, arg DocumentSubmissionEventParams) error {
	_, err := q.db.Exec(ctx, documentSubmissionEvent, arg.UserID, arg.DocumentID, arg.Comment)
	return err
}

const documentUpdateEvent = `-- name: DocumentUpdateEvent :exec
INSERT INTO t_app_events (type, user_id, document_id, comment)
VALUES ('document_update', $1, $2, $3)
`

type DocumentUpdateEventParams struct {
	UserID     string
	DocumentID pgtype.Int4
	Comment    pgtype.Text
}

func (q *Queries) DocumentUpdateEvent(ctx context.Context, arg DocumentUpdateEventParams) error {
	_, err := q.db.Exec(ctx, documentUpdateEvent, arg.UserID, arg.DocumentID, arg.Comment)
	return err
}

const documentValidationEvent = `-- name: DocumentValidationEvent :exec
INSERT INTO t_app_events (type, document_id, admin_id, comment)
VALUES ('document_validation', $1, $2, $3)
`

type DocumentValidationEventParams struct {
	DocumentID pgtype.Int4
	AdminID    pgtype.Text
	Comment    pgtype.Text
}

func (q *Queries) DocumentValidationEvent(ctx context.Context, arg DocumentValidationEventParams) error {
	_, err := q.db.Exec(ctx, documentValidationEvent, arg.DocumentID, arg.AdminID, arg.Comment)
	return err
}
