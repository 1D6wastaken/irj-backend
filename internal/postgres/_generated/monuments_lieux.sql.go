// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: monuments_lieux.sql

package queries

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const attachAuthorToMonuLieu = `-- name: AttachAuthorToMonuLieu :exec
INSERT INTO cor_auteur_fiche_monu_lieu
    (auteur_fiche_monu_lieu_id, monument_lieu_id)
VALUES ($1, $2)
`

type AttachAuthorToMonuLieuParams struct {
	AuteurID int32
	ID       int32
}

func (q *Queries) AttachAuthorToMonuLieu(ctx context.Context, arg AttachAuthorToMonuLieuParams) error {
	_, err := q.db.Exec(ctx, attachAuthorToMonuLieu, arg.AuteurID, arg.ID)
	return err
}

const attachEtatsToMonuLieu = `-- name: AttachEtatsToMonuLieu :exec
INSERT INTO cor_etat_cons_monu_lieu
    (etat_cons_monu_lieu_id, monument_lieu_id)
SELECT unnest($1::int[]), $2
`

type AttachEtatsToMonuLieuParams struct {
	EtatIds []int32
	ID      int32
}

func (q *Queries) AttachEtatsToMonuLieu(ctx context.Context, arg AttachEtatsToMonuLieuParams) error {
	_, err := q.db.Exec(ctx, attachEtatsToMonuLieu, arg.EtatIds, arg.ID)
	return err
}

const attachMateriauxToMonuLieu = `-- name: AttachMateriauxToMonuLieu :exec
INSERT INTO cor_materiaux_monu_lieu
    (materiau_monu_lieu_id, monument_lieu_id)
SELECT unnest($1::int[]), $2
`

type AttachMateriauxToMonuLieuParams struct {
	MateriauIds []int32
	ID          int32
}

func (q *Queries) AttachMateriauxToMonuLieu(ctx context.Context, arg AttachMateriauxToMonuLieuParams) error {
	_, err := q.db.Exec(ctx, attachMateriauxToMonuLieu, arg.MateriauIds, arg.ID)
	return err
}

const attachMediasToMonuLieu = `-- name: AttachMediasToMonuLieu :exec
INSERT INTO cor_medias_monu_lieu
    (media_monu_lieu_id, monument_lieu_id)
SELECT unnest($1::int[]), $2
`

type AttachMediasToMonuLieuParams struct {
	MediaIds []int32
	ID       int32
}

func (q *Queries) AttachMediasToMonuLieu(ctx context.Context, arg AttachMediasToMonuLieuParams) error {
	_, err := q.db.Exec(ctx, attachMediasToMonuLieu, arg.MediaIds, arg.ID)
	return err
}

const attachNaturesToMonuLieu = `-- name: AttachNaturesToMonuLieu :exec
INSERT INTO cor_natures_monu_lieu (monu_lieu_nature_id, monument_lieu_id)
SELECT unnest($1::int[]), $2
`

type AttachNaturesToMonuLieuParams struct {
	NatureIds []int32
	ID        int32
}

func (q *Queries) AttachNaturesToMonuLieu(ctx context.Context, arg AttachNaturesToMonuLieuParams) error {
	_, err := q.db.Exec(ctx, attachNaturesToMonuLieu, arg.NatureIds, arg.ID)
	return err
}

const attachSieclesToMonuLieu = `-- name: AttachSieclesToMonuLieu :exec
INSERT INTO cor_siecles_monu_lieu
    (siecle_monu_lieu_id, monument_lieu_id)
SELECT unnest($1::int[]), $2
`

type AttachSieclesToMonuLieuParams struct {
	SiecleID []int32
	ID       int32
}

func (q *Queries) AttachSieclesToMonuLieu(ctx context.Context, arg AttachSieclesToMonuLieuParams) error {
	_, err := q.db.Exec(ctx, attachSieclesToMonuLieu, arg.SiecleID, arg.ID)
	return err
}

const attachThemesToMonuLieu = `-- name: AttachThemesToMonuLieu :exec
INSERT INTO cor_themes_monu_lieu (theme_id, monu_lieu_id)
SELECT unnest($1::int[]), $2
`

type AttachThemesToMonuLieuParams struct {
	ThemeIds []int32
	ID       int32
}

func (q *Queries) AttachThemesToMonuLieu(ctx context.Context, arg AttachThemesToMonuLieuParams) error {
	_, err := q.db.Exec(ctx, attachThemesToMonuLieu, arg.ThemeIds, arg.ID)
	return err
}

const createMonumentLieu = `-- name: CreateMonumentLieu :one
INSERT INTO t_monuments_lieux
(titre_monu_lieu,
 description,
 histoire,
 geolocalisation,
 bibliographie,
 protection,
 protection_commentaires,
 source,
 date_creation,
 date_maj,
 contributeurs,
 id_commune,
 id_pays,
 publie,
 publication_status,
 parent_id)
VALUES ($1,
        $2,
        $3,
        $4,
        $5,
        $6,
        $7,
        $8,
        NOW(),
        NOW(),
        $9,
        $10,
        $11,
        false,
        'DRAFT',
        $12)
RETURNING id_monument_lieu
`

type CreateMonumentLieuParams struct {
	TitreMonuLieu          string
	Description            pgtype.Text
	Histoire               pgtype.Text
	Geolocalisation        pgtype.Text
	Bibliographie          pgtype.Text
	Protection             pgtype.Bool
	ProtectionCommentaires pgtype.Text
	Source                 pgtype.Text
	Contributeurs          pgtype.Text
	IDCommune              pgtype.Int4
	IDPays                 pgtype.Int4
	ParentID               pgtype.Int4
}

func (q *Queries) CreateMonumentLieu(ctx context.Context, arg CreateMonumentLieuParams) (int32, error) {
	row := q.db.QueryRow(ctx, createMonumentLieu,
		arg.TitreMonuLieu,
		arg.Description,
		arg.Histoire,
		arg.Geolocalisation,
		arg.Bibliographie,
		arg.Protection,
		arg.ProtectionCommentaires,
		arg.Source,
		arg.Contributeurs,
		arg.IDCommune,
		arg.IDPays,
		arg.ParentID,
	)
	var id_monument_lieu int32
	err := row.Scan(&id_monument_lieu)
	return id_monument_lieu, err
}

const deletePendingMonumentLieu = `-- name: DeletePendingMonumentLieu :exec
DELETE
FROM t_monuments_lieux
WHERE id_monument_lieu = $1
`

func (q *Queries) DeletePendingMonumentLieu(ctx context.Context, idMonumentLieu int32) error {
	_, err := q.db.Exec(ctx, deletePendingMonumentLieu, idMonumentLieu)
	return err
}

const detachAuthorFromMonuLieu = `-- name: DetachAuthorFromMonuLieu :exec
DELETE
FROM cor_auteur_fiche_monu_lieu
WHERE monument_lieu_id = $1
`

func (q *Queries) DetachAuthorFromMonuLieu(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, detachAuthorFromMonuLieu, id)
	return err
}

const detachEtatsFromMonuLieu = `-- name: DetachEtatsFromMonuLieu :exec
DELETE
FROM cor_etat_cons_monu_lieu
WHERE monument_lieu_id = $1
`

func (q *Queries) DetachEtatsFromMonuLieu(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, detachEtatsFromMonuLieu, id)
	return err
}

const detachMateriauxFromMonuLieu = `-- name: DetachMateriauxFromMonuLieu :exec
DELETE
FROM cor_materiaux_monu_lieu
WHERE monument_lieu_id = $1
`

func (q *Queries) DetachMateriauxFromMonuLieu(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, detachMateriauxFromMonuLieu, id)
	return err
}

const detachMediasFromMonuLieu = `-- name: DetachMediasFromMonuLieu :exec
DELETE
FROM cor_medias_monu_lieu
WHERE monument_lieu_id = $1
`

func (q *Queries) DetachMediasFromMonuLieu(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, detachMediasFromMonuLieu, id)
	return err
}

const detachNaturesFromMonuLieu = `-- name: DetachNaturesFromMonuLieu :exec
DELETE
FROM cor_natures_monu_lieu
WHERE monument_lieu_id = $1
`

func (q *Queries) DetachNaturesFromMonuLieu(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, detachNaturesFromMonuLieu, id)
	return err
}

const detachSieclesFromMonuLieu = `-- name: DetachSieclesFromMonuLieu :exec
DELETE
FROM cor_siecles_monu_lieu
WHERE monument_lieu_id = $1
`

func (q *Queries) DetachSieclesFromMonuLieu(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, detachSieclesFromMonuLieu, id)
	return err
}

const detachThemesFromMonuLieu = `-- name: DetachThemesFromMonuLieu :exec
DELETE
FROM cor_themes_monu_lieu
WHERE monu_lieu_id = $1
`

func (q *Queries) DetachThemesFromMonuLieu(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, detachThemesFromMonuLieu, id)
	return err
}

const getFilteredMonumentsLieux = `-- name: GetFilteredMonumentsLieux :many
SELECT m.id_monument_lieu                                                                             AS id,
       m.titre_monu_lieu                                                                              AS title,
       COALESCE(array_agg(DISTINCT bs.siecle_list) FILTER (WHERE bs.siecle_list IS NOT NULL), '{}')   AS siecles,
       COALESCE(array_agg(DISTINCT bmn.monu_lieu_nature_type) FILTER (WHERE bmn.monu_lieu_nature_type IS NOT NULL),
                '{}')                                                                                 AS natures,
       COALESCE(array_agg(DISTINCT tm.chemin_media) FILTER (WHERE tm.chemin_media IS NOT NULL), '{}') AS medias
FROM t_monuments_lieux m
         LEFT JOIN cor_siecles_monu_lieu csl ON m.id_monument_lieu = csl.monument_lieu_id
         LEFT JOIN bib_siecle bs ON bs.id_siecle = csl.siecle_monu_lieu_id

         LEFT JOIN cor_natures_monu_lieu cnl ON m.id_monument_lieu = cnl.monument_lieu_id
         LEFT JOIN bib_monu_lieu_natures bmn ON bmn.id_monu_lieu_nature = cnl.monu_lieu_nature_id

         LEFT JOIN cor_medias_monu_lieu cme ON m.id_monument_lieu = cme.monument_lieu_id
         LEFT JOIN t_medias tm ON tm.id_media = cme.media_monu_lieu_id

         LEFT JOIN loc_communes lc ON m.id_commune = lc.id_commune
         LEFT JOIN loc_departements ld ON lc.id_departement = ld.id_departement
         LEFT JOIN loc_regions lr ON ld.id_region = lr.id_region
         LEFT JOIN loc_pays lp ON lr.id_pays = lp.id_pays

         LEFT JOIN cor_etat_cons_monu_lieu cel ON m.id_monument_lieu = cel.monument_lieu_id
         LEFT JOIN cor_auteur_fiche_monu_lieu caf ON m.id_monument_lieu = caf.monument_lieu_id
         LEFT JOIN cor_materiaux_monu_lieu cml ON m.id_monument_lieu = cml.monument_lieu_id
         LEFT JOIN cor_monu_lieu_pers_mo cpm ON m.id_monument_lieu = cpm.monument_lieu_id
         LEFT JOIN cor_monu_lieu_pers_phy cpp ON m.id_monument_lieu = cpp.monu_lieu_id
         LEFT JOIN cor_monu_lieu_mob_img cmi ON m.id_monument_lieu = cmi.monument_lieu_id
WHERE (cardinality($1::int[]) = 0 OR csl.siecle_monu_lieu_id = ANY ($1::int[]))
   OR (cardinality($2::int[]) = 0 OR cnl.monu_lieu_nature_id = ANY ($2::int[]))
   OR (cardinality($3::int[]) = 0 OR cel.etat_cons_monu_lieu_id = ANY ($3::int[]))
   OR (cardinality($4::int[]) = 0 OR
       caf.auteur_fiche_monu_lieu_id = ANY ($4::int[]))
   OR (cardinality($5::int[]) = 0 OR cml.materiau_monu_lieu_id = ANY ($5::int[]))
   OR (cardinality($6::int[]) = 0 OR cpm.pers_morale_id = ANY ($6::int[]))
   OR (cardinality($7::int[]) = 0 OR cpp.pers_phy_id = ANY ($7::int[]))
   OR (cardinality($8::int[]) = 0 OR cmi.mobilier_image_id = ANY ($8::int[]))
   OR (cardinality($9::int[]) = 0 OR lc.id_commune = ANY ($9::int[]))
   OR (cardinality($10::int[]) = 0 OR ld.id_departement = ANY ($10::int[]))
   OR (cardinality($11::int[]) = 0 OR lr.id_region = ANY ($11::int[]))
   OR (cardinality($12::int[]) = 0 OR lp.id_pays = ANY ($12::int[]))
GROUP BY m.id_monument_lieu
ORDER BY m.id_monument_lieu
LIMIT $14 OFFSET $13
`

type GetFilteredMonumentsLieuxParams struct {
	Siecles      []int32
	Natures      []int32
	Etats        []int32
	AuteursFiche []int32
	Materiaux    []int32
	PersMo       []int32
	PersPhy      []int32
	Mobiliers    []int32
	Cities       []int32
	Departments  []int32
	Regions      []int32
	Pays         []int32
	OffsetParam  int32
	LimitParam   int32
}

type GetFilteredMonumentsLieuxRow struct {
	ID      int32
	Title   string
	Siecles interface{}
	Natures interface{}
	Medias  interface{}
}

func (q *Queries) GetFilteredMonumentsLieux(ctx context.Context, arg GetFilteredMonumentsLieuxParams) ([]GetFilteredMonumentsLieuxRow, error) {
	rows, err := q.db.Query(ctx, getFilteredMonumentsLieux,
		arg.Siecles,
		arg.Natures,
		arg.Etats,
		arg.AuteursFiche,
		arg.Materiaux,
		arg.PersMo,
		arg.PersPhy,
		arg.Mobiliers,
		arg.Cities,
		arg.Departments,
		arg.Regions,
		arg.Pays,
		arg.OffsetParam,
		arg.LimitParam,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetFilteredMonumentsLieuxRow
	for rows.Next() {
		var i GetFilteredMonumentsLieuxRow
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Siecles,
			&i.Natures,
			&i.Medias,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getMonumentLieuByID = `-- name: GetMonumentLieuByID :one
SELECT m.id_monument_lieu AS id,
       m.titre_monu_lieu  AS title,
       m.description,
       m.histoire,
       m.geolocalisation,
       m.bibliographie,
       m.date_creation,
       m.date_maj,
       m.publie,
       m.contributeurs,
       m.protection,
       m.protection_commentaires,
       m.source,
       -- Redacteurs (auteurs fiche)
       COALESCE(array_agg(DISTINCT baf.auteur_fiche_nom) FILTER (WHERE baf.auteur_fiche_nom IS NOT NULL),
                '{}')     AS redacteurs,
       -- Commune
       c.nom_commune      AS commune,
       -- Département
       d.nom_departement  AS departement,
       -- Région
       r.nom_region       AS region,
       -- Pays
       p.nom_pays         AS pays,
       -- États de conservation
       COALESCE(array_agg(DISTINCT bec.etat_conservation_type) FILTER (WHERE bec.etat_conservation_type IS NOT NULL),
                '{}')     AS etats_conservation,
       -- Matériaux
       COALESCE(array_agg(DISTINCT bm.materiau_type) FILTER (WHERE bm.materiau_type IS NOT NULL),
                '{}')     AS materiaux,
       -- Natures
       COALESCE(array_agg(DISTINCT bmn.monu_lieu_nature_type) FILTER (WHERE bmn.id_monu_lieu_nature IS NOT NULL),
                '{}')     AS natures,
       -- Médias
       COALESCE(
                       jsonb_agg(
                       DISTINCT jsonb_build_object(
                               'id', tm.id_media,
                               'titre', tm.titre_media
                                )
                                ) FILTER (
                           WHERE tm.chemin_media IS NOT NULL
                       AND tm.chemin_media <> ''
                       AND tm.chemin_media <> '[]'
                       AND EXISTS (SELECT 1
                                   FROM jsonb_array_elements(tm.chemin_media::jsonb) AS elem
                                   WHERE COALESCE(elem ->> 'path', '') <> '')
                           ),
                       '[]'::jsonb
       )                  AS medias,
       -- Mobiliers images (IDs uniquement)
       COALESCE(array_agg(DISTINCT cmi.mobilier_image_id) FILTER (WHERE cmi.mobilier_image_id IS NOT NULL),
                '{}')     AS mobiliers_images_liees,
       -- Personnes morales (IDs uniquement)
       COALESCE(array_agg(DISTINCT cpm.pers_morale_id) FILTER (WHERE cpm.pers_morale_id IS NOT NULL),
                '{}')     AS personnes_morales_liees,
       -- Personnes physiques (IDs uniquement)
       COALESCE(array_agg(DISTINCT cpp.pers_phy_id) FILTER (WHERE cpp.pers_phy_id IS NOT NULL),
                '{}')     AS personnes_physiques_liees,
       -- Siècles
       COALESCE(array_agg(DISTINCT bs.siecle_list) FILTER (WHERE bs.siecle_list IS NOT NULL),
                '{}')     AS siecles,
       -- Themes
       COALESCE(array_agg(DISTINCT t.theme_type) FILTER (WHERE t.theme_type IS NOT NULL),
                '{}')     AS themes,
       publication_status,
       parent_id
FROM t_monuments_lieux m
         LEFT JOIN cor_auteur_fiche_monu_lieu caf ON m.id_monument_lieu = caf.monument_lieu_id
         LEFT JOIN bib_auteurs baf ON caf.auteur_fiche_monu_lieu_id = baf.id_auteur_fiche
         LEFT JOIN loc_communes c ON m.id_commune = c.id_commune
         LEFT JOIN loc_departements d ON c.id_departement = d.id_departement
         LEFT JOIN loc_regions r ON d.id_region = r.id_region
         LEFT JOIN loc_pays p ON r.id_pays = p.id_pays
         LEFT JOIN cor_etat_cons_monu_lieu cec ON m.id_monument_lieu = cec.monument_lieu_id
         LEFT JOIN bib_etats_conservation bec ON cec.etat_cons_monu_lieu_id = bec.id_etat_conservation
         LEFT JOIN cor_materiaux_monu_lieu cm ON m.id_monument_lieu = cm.monument_lieu_id
         LEFT JOIN bib_materiaux bm ON cm.materiau_monu_lieu_id = bm.id_materiau
         LEFT JOIN cor_natures_monu_lieu cnm ON m.id_monument_lieu = cnm.monument_lieu_id
         LEFT JOIN bib_monu_lieu_natures bmn ON cnm.monu_lieu_nature_id = bmn.id_monu_lieu_nature
         LEFT JOIN cor_medias_monu_lieu cmm ON m.id_monument_lieu = cmm.monument_lieu_id
         LEFT JOIN t_medias tm ON cmm.media_monu_lieu_id = tm.id_media
         LEFT JOIN cor_monu_lieu_mob_img cmi ON m.id_monument_lieu = cmi.monument_lieu_id
         LEFT JOIN cor_monu_lieu_pers_mo cpm ON m.id_monument_lieu = cpm.monument_lieu_id
         LEFT JOIN cor_monu_lieu_pers_phy cpp ON m.id_monument_lieu = cpp.monu_lieu_id
         LEFT JOIN cor_siecles_monu_lieu csl ON m.id_monument_lieu = csl.monument_lieu_id
         LEFT JOIN bib_siecle bs ON csl.siecle_monu_lieu_id = bs.id_siecle
         LEFT JOIN cor_themes_monu_lieu ctml ON m.id_monument_lieu = ctml.monu_lieu_id
         LEFT JOIN t_themes t ON t.id_theme = ctml.theme_id
WHERE m.id_monument_lieu = $1
GROUP BY m.id_monument_lieu,
         c.nom_commune,
         d.nom_departement,
         r.nom_region,
         p.nom_pays
`

type GetMonumentLieuByIDRow struct {
	ID                      int32
	Title                   string
	Description             pgtype.Text
	Histoire                pgtype.Text
	Geolocalisation         pgtype.Text
	Bibliographie           pgtype.Text
	DateCreation            pgtype.Date
	DateMaj                 pgtype.Date
	Publie                  pgtype.Bool
	Contributeurs           pgtype.Text
	Protection              pgtype.Bool
	ProtectionCommentaires  pgtype.Text
	Source                  pgtype.Text
	Redacteurs              interface{}
	Commune                 pgtype.Text
	Departement             pgtype.Text
	Region                  pgtype.Text
	Pays                    pgtype.Text
	EtatsConservation       interface{}
	Materiaux               interface{}
	Natures                 interface{}
	Medias                  interface{}
	MobiliersImagesLiees    interface{}
	PersonnesMoralesLiees   interface{}
	PersonnesPhysiquesLiees interface{}
	Siecles                 interface{}
	Themes                  interface{}
	PublicationStatus       PublicationStatus
	ParentID                pgtype.Int4
}

func (q *Queries) GetMonumentLieuByID(ctx context.Context, idMonumentLieu int32) (GetMonumentLieuByIDRow, error) {
	row := q.db.QueryRow(ctx, getMonumentLieuByID, idMonumentLieu)
	var i GetMonumentLieuByIDRow
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.Histoire,
		&i.Geolocalisation,
		&i.Bibliographie,
		&i.DateCreation,
		&i.DateMaj,
		&i.Publie,
		&i.Contributeurs,
		&i.Protection,
		&i.ProtectionCommentaires,
		&i.Source,
		&i.Redacteurs,
		&i.Commune,
		&i.Departement,
		&i.Region,
		&i.Pays,
		&i.EtatsConservation,
		&i.Materiaux,
		&i.Natures,
		&i.Medias,
		&i.MobiliersImagesLiees,
		&i.PersonnesMoralesLiees,
		&i.PersonnesPhysiquesLiees,
		&i.Siecles,
		&i.Themes,
		&i.PublicationStatus,
		&i.ParentID,
	)
	return i, err
}

const getPendingMonumentsLieux = `-- name: GetPendingMonumentsLieux :many
SELECT m.id_monument_lieu     AS id,
       m.titre_monu_lieu      AS title,
       m.description,
       m.histoire,
       m.geolocalisation,
       m.bibliographie,
       m.date_creation,
       m.date_maj,
       m.publie,
       m.contributeurs,
       m.protection,
       m.protection_commentaires,
       m.source,
       -- Redacteurs (auteurs fiche)
       COALESCE(array_agg(DISTINCT baf.auteur_fiche_nom) FILTER (WHERE baf.auteur_fiche_nom IS NOT NULL),
                '{}')         AS redacteurs,
       -- Commune
       MAX(c.nom_commune)     AS commune,
       -- Département
       MAX(d.nom_departement) AS departement,
       -- Région
       MAX(r.nom_region)      AS region,
       -- Pays
       MAX(p.nom_pays)        AS pays,
       -- États de conservation
       COALESCE(array_agg(DISTINCT bec.etat_conservation_type) FILTER (WHERE bec.etat_conservation_type IS NOT NULL),
                '{}')         AS etats_conservation,
       -- Matériaux
       COALESCE(array_agg(DISTINCT bm.materiau_type) FILTER (WHERE bm.materiau_type IS NOT NULL),
                '{}')         AS materiaux,
       -- Natures
       COALESCE(array_agg(DISTINCT bmn.monu_lieu_nature_type) FILTER (WHERE bmn.id_monu_lieu_nature IS NOT NULL),
                '{}')         AS natures,
       -- Médias
       COALESCE(
                       jsonb_agg(
                       DISTINCT jsonb_build_object(
                               'id', tm.id_media,
                               'titre', tm.titre_media
                                )
                                ) FILTER (
                           WHERE tm.chemin_media IS NOT NULL
                       AND tm.chemin_media <> ''
                       AND tm.chemin_media <> '[]'
                       AND EXISTS (SELECT 1
                                   FROM jsonb_array_elements(tm.chemin_media::jsonb) AS elem
                                   WHERE COALESCE(elem ->> 'path', '') <> '')
                           ),
                       '[]'::jsonb
       )                      AS medias,
       -- Mobiliers images (IDs uniquement)
       COALESCE(array_agg(DISTINCT cmi.mobilier_image_id) FILTER (WHERE cmi.mobilier_image_id IS NOT NULL),
                '{}')         AS mobiliers_images_liees,
       -- Personnes morales (IDs uniquement)
       COALESCE(array_agg(DISTINCT cpm.pers_morale_id) FILTER (WHERE cpm.pers_morale_id IS NOT NULL),
                '{}')         AS personnes_morales_liees,
       -- Personnes physiques (IDs uniquement)
       COALESCE(array_agg(DISTINCT cpp.pers_phy_id) FILTER (WHERE cpp.pers_phy_id IS NOT NULL),
                '{}')         AS personnes_physiques_liees,
       -- Siècles
       COALESCE(array_agg(DISTINCT bs.siecle_list) FILTER (WHERE bs.siecle_list IS NOT NULL),
                '{}')         AS siecles,
       -- Themes
       COALESCE(array_agg(DISTINCT t.theme_type) FILTER (WHERE t.theme_type IS NOT NULL),
                '{}')         AS themes
FROM t_monuments_lieux m
         LEFT JOIN cor_auteur_fiche_monu_lieu caf ON m.id_monument_lieu = caf.monument_lieu_id
         LEFT JOIN bib_auteurs baf ON caf.auteur_fiche_monu_lieu_id = baf.id_auteur_fiche
         LEFT JOIN loc_communes c ON m.id_commune = c.id_commune
         LEFT JOIN loc_departements d ON c.id_departement = d.id_departement
         LEFT JOIN loc_regions r ON d.id_region = r.id_region
         LEFT JOIN loc_pays p ON r.id_pays = p.id_pays
         LEFT JOIN cor_etat_cons_monu_lieu cec ON m.id_monument_lieu = cec.monument_lieu_id
         LEFT JOIN bib_etats_conservation bec ON cec.etat_cons_monu_lieu_id = bec.id_etat_conservation
         LEFT JOIN cor_materiaux_monu_lieu cm ON m.id_monument_lieu = cm.monument_lieu_id
         LEFT JOIN bib_materiaux bm ON cm.materiau_monu_lieu_id = bm.id_materiau
         LEFT JOIN cor_medias_monu_lieu cmm ON m.id_monument_lieu = cmm.monument_lieu_id
         LEFT JOIN cor_natures_monu_lieu cnm ON m.id_monument_lieu = cnm.monument_lieu_id
         LEFT JOIN bib_monu_lieu_natures bmn ON cnm.monu_lieu_nature_id = bmn.id_monu_lieu_nature
         LEFT JOIN t_medias tm ON cmm.media_monu_lieu_id = tm.id_media
         LEFT JOIN cor_monu_lieu_mob_img cmi ON m.id_monument_lieu = cmi.monument_lieu_id
         LEFT JOIN cor_monu_lieu_pers_mo cpm ON m.id_monument_lieu = cpm.monument_lieu_id
         LEFT JOIN cor_monu_lieu_pers_phy cpp ON m.id_monument_lieu = cpp.monu_lieu_id
         LEFT JOIN cor_siecles_monu_lieu csl ON m.id_monument_lieu = csl.monument_lieu_id
         LEFT JOIN bib_siecle bs ON csl.siecle_monu_lieu_id = bs.id_siecle
         LEFT JOIN cor_themes_monu_lieu ctml ON m.id_monument_lieu = ctml.monu_lieu_id
         LEFT JOIN t_themes t ON t.id_theme = ctml.theme_id
WHERE m.publication_status = 'DRAFT'
   OR m.publication_status = 'PENDING'
GROUP BY m.id_monument_lieu
`

type GetPendingMonumentsLieuxRow struct {
	ID                      int32
	Title                   string
	Description             pgtype.Text
	Histoire                pgtype.Text
	Geolocalisation         pgtype.Text
	Bibliographie           pgtype.Text
	DateCreation            pgtype.Date
	DateMaj                 pgtype.Date
	Publie                  pgtype.Bool
	Contributeurs           pgtype.Text
	Protection              pgtype.Bool
	ProtectionCommentaires  pgtype.Text
	Source                  pgtype.Text
	Redacteurs              interface{}
	Commune                 interface{}
	Departement             interface{}
	Region                  interface{}
	Pays                    interface{}
	EtatsConservation       interface{}
	Materiaux               interface{}
	Natures                 interface{}
	Medias                  interface{}
	MobiliersImagesLiees    interface{}
	PersonnesMoralesLiees   interface{}
	PersonnesPhysiquesLiees interface{}
	Siecles                 interface{}
	Themes                  interface{}
}

func (q *Queries) GetPendingMonumentsLieux(ctx context.Context) ([]GetPendingMonumentsLieuxRow, error) {
	rows, err := q.db.Query(ctx, getPendingMonumentsLieux)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetPendingMonumentsLieuxRow
	for rows.Next() {
		var i GetPendingMonumentsLieuxRow
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.Histoire,
			&i.Geolocalisation,
			&i.Bibliographie,
			&i.DateCreation,
			&i.DateMaj,
			&i.Publie,
			&i.Contributeurs,
			&i.Protection,
			&i.ProtectionCommentaires,
			&i.Source,
			&i.Redacteurs,
			&i.Commune,
			&i.Departement,
			&i.Region,
			&i.Pays,
			&i.EtatsConservation,
			&i.Materiaux,
			&i.Natures,
			&i.Medias,
			&i.MobiliersImagesLiees,
			&i.PersonnesMoralesLiees,
			&i.PersonnesPhysiquesLiees,
			&i.Siecles,
			&i.Themes,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const linkMonuLieuToMobImg = `-- name: LinkMonuLieuToMobImg :exec
INSERT INTO cor_monu_lieu_mob_img
    (monument_lieu_id, mobilier_image_id)
SELECT $1, unnest($2::int[])
`

type LinkMonuLieuToMobImgParams struct {
	ID        int32
	MobImgIds []int32
}

func (q *Queries) LinkMonuLieuToMobImg(ctx context.Context, arg LinkMonuLieuToMobImgParams) error {
	_, err := q.db.Exec(ctx, linkMonuLieuToMobImg, arg.ID, arg.MobImgIds)
	return err
}

const linkMonuLieuToPersMo = `-- name: LinkMonuLieuToPersMo :exec
INSERT INTO cor_monu_lieu_pers_mo
    (monument_lieu_id, pers_morale_id)
SELECT $1, unnest($2::int[])
`

type LinkMonuLieuToPersMoParams struct {
	ID         int32
	PersoMoIds []int32
}

func (q *Queries) LinkMonuLieuToPersMo(ctx context.Context, arg LinkMonuLieuToPersMoParams) error {
	_, err := q.db.Exec(ctx, linkMonuLieuToPersMo, arg.ID, arg.PersoMoIds)
	return err
}

const linkMonuLieuToPersPhy = `-- name: LinkMonuLieuToPersPhy :exec
INSERT INTO cor_monu_lieu_pers_phy
    (monu_lieu_id, pers_phy_id)
SELECT $1, unnest($2::int[])
`

type LinkMonuLieuToPersPhyParams struct {
	ID          int32
	PersoPhyIds []int32
}

func (q *Queries) LinkMonuLieuToPersPhy(ctx context.Context, arg LinkMonuLieuToPersPhyParams) error {
	_, err := q.db.Exec(ctx, linkMonuLieuToPersPhy, arg.ID, arg.PersoPhyIds)
	return err
}

const unlinkMonuLieuFromMobImg = `-- name: UnlinkMonuLieuFromMobImg :exec
DELETE
FROM cor_monu_lieu_mob_img
WHERE monument_lieu_id = $1
`

func (q *Queries) UnlinkMonuLieuFromMobImg(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, unlinkMonuLieuFromMobImg, id)
	return err
}

const unlinkMonuLieuFromPersMo = `-- name: UnlinkMonuLieuFromPersMo :exec
DELETE
FROM cor_monu_lieu_pers_mo
WHERE monument_lieu_id = $1
`

func (q *Queries) UnlinkMonuLieuFromPersMo(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, unlinkMonuLieuFromPersMo, id)
	return err
}

const unlinkMonuLieuFromPersPhy = `-- name: UnlinkMonuLieuFromPersPhy :exec
DELETE
FROM cor_monu_lieu_pers_phy
WHERE monu_lieu_id = $1
`

func (q *Queries) UnlinkMonuLieuFromPersPhy(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, unlinkMonuLieuFromPersPhy, id)
	return err
}

const validatePendingMonumentLieu = `-- name: ValidatePendingMonumentLieu :exec
UPDATE t_monuments_lieux
SET publication_status = 'PUBLISHED',
    publie             = true,
    parent_id          = NULL
WHERE id_monument_lieu = $1
`

func (q *Queries) ValidatePendingMonumentLieu(ctx context.Context, idMonumentLieu int32) error {
	_, err := q.db.Exec(ctx, validatePendingMonumentLieu, idMonumentLieu)
	return err
}
