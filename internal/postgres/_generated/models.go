// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0

package queries

import (
	"database/sql/driver"
	"fmt"

	"github.com/jackc/pgx/v5/pgtype"
)

type DomaineExpertise string

const (
	DomaineExpertiseART          DomaineExpertise = "ART"
	DomaineExpertiseARCHITECTURE DomaineExpertise = "ARCHITECTURE"
	DomaineExpertiseMEDIEVAL     DomaineExpertise = "MEDIEVAL"
	DomaineExpertiseARCHEOLOGIE  DomaineExpertise = "ARCHEOLOGIE"
	DomaineExpertisePATRIMOINE   DomaineExpertise = "PATRIMOINE"
	DomaineExpertiseTHEOLOGIE    DomaineExpertise = "THEOLOGIE"
	DomaineExpertisePELERINAGE   DomaineExpertise = "PELERINAGE"
	DomaineExpertiseAUTRE        DomaineExpertise = "AUTRE"
)

func (e *DomaineExpertise) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = DomaineExpertise(s)
	case string:
		*e = DomaineExpertise(s)
	default:
		return fmt.Errorf("unsupported scan type for DomaineExpertise: %T", src)
	}
	return nil
}

type NullDomaineExpertise struct {
	DomaineExpertise DomaineExpertise
	Valid            bool // Valid is true if DomaineExpertise is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullDomaineExpertise) Scan(value interface{}) error {
	if value == nil {
		ns.DomaineExpertise, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.DomaineExpertise.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullDomaineExpertise) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.DomaineExpertise), nil
}

type PublicationStatus string

const (
	PublicationStatusDRAFT     PublicationStatus = "DRAFT"
	PublicationStatusPENDING   PublicationStatus = "PENDING"
	PublicationStatusPUBLISHED PublicationStatus = "PUBLISHED"
)

func (e *PublicationStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = PublicationStatus(s)
	case string:
		*e = PublicationStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for PublicationStatus: %T", src)
	}
	return nil
}

type NullPublicationStatus struct {
	PublicationStatus PublicationStatus
	Valid             bool // Valid is true if PublicationStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullPublicationStatus) Scan(value interface{}) error {
	if value == nil {
		ns.PublicationStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.PublicationStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullPublicationStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.PublicationStatus), nil
}

type UserGrade string

const (
	UserGradePENDING UserGrade = "PENDING"
	UserGradeACTIVE  UserGrade = "ACTIVE"
	UserGradeADMIN   UserGrade = "ADMIN"
)

func (e *UserGrade) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = UserGrade(s)
	case string:
		*e = UserGrade(s)
	default:
		return fmt.Errorf("unsupported scan type for UserGrade: %T", src)
	}
	return nil
}

type NullUserGrade struct {
	UserGrade UserGrade
	Valid     bool // Valid is true if UserGrade is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullUserGrade) Scan(value interface{}) error {
	if value == nil {
		ns.UserGrade, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.UserGrade.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullUserGrade) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.UserGrade), nil
}

type BibAuteur struct {
	IDAuteurFiche  int32
	AuteurFicheNom pgtype.Text
}

type TPasswordReset struct {
	UserID    string
	Token     string
	CreatedAt pgtype.Timestamptz
}
