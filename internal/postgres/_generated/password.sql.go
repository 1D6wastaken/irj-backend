// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: password.sql

package queries

import (
	"context"
)

const createResetToken = `-- name: CreateResetToken :exec
INSERT INTO t_password_resets (user_id, token)
VALUES ($1, $2)
`

type CreateResetTokenParams struct {
	ID    string
	Token string
}

func (q *Queries) CreateResetToken(ctx context.Context, arg CreateResetTokenParams) error {
	_, err := q.db.Exec(ctx, createResetToken, arg.ID, arg.Token)
	return err
}

const deletePasswordResetByID = `-- name: DeletePasswordResetByID :exec
DELETE
FROM t_password_resets
WHERE user_id = $1
`

func (q *Queries) DeletePasswordResetByID(ctx context.Context, userID string) error {
	_, err := q.db.Exec(ctx, deletePasswordResetByID, userID)
	return err
}

const deletePasswordResetByToken = `-- name: DeletePasswordResetByToken :exec
DELETE
FROM t_password_resets
WHERE token = $1
`

func (q *Queries) DeletePasswordResetByToken(ctx context.Context, token string) error {
	_, err := q.db.Exec(ctx, deletePasswordResetByToken, token)
	return err
}

const getResetPasswordByToken = `-- name: GetResetPasswordByToken :one
SELECT user_id, token, created_at
FROM t_password_resets
WHERE token = $1
`

func (q *Queries) GetResetPasswordByToken(ctx context.Context, token string) (TPasswordReset, error) {
	row := q.db.QueryRow(ctx, getResetPasswordByToken, token)
	var i TPasswordReset
	err := row.Scan(&i.UserID, &i.Token, &i.CreatedAt)
	return i, err
}
