// Code generated by go-swagger; DO NOT EDIT.

package api

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// SearchFilters search filters
//
// swagger:model SearchFilters
type SearchFilters struct {

	// centuries
	Centuries []int32 `json:"centuries"`

	// countries
	Countries []int32 `json:"countries"`

	// regions
	Regions []int32 `json:"regions"`

	// departments
	Departments []int32 `json:"departments"`

	// cities
	Cities []int32 `json:"cities"`

	// mobiliers images
	MobiliersImages *SearchFiltersMobiliersImages `json:"mobiliers_images,omitempty"`

	// monuments lieux
	MonumentsLieux *SearchFiltersMonumentsLieux `json:"monuments_lieux,omitempty"`

	// pers morales
	PersMorales *SearchFiltersPersMorales `json:"pers_morales,omitempty"`

	// pers physiques
	PersPhysiques *SearchFiltersPersPhysiques `json:"pers_physiques,omitempty"`
}

// Validate validates this search filters
func (m *SearchFilters) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMobiliersImages(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMonumentsLieux(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePersMorales(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePersPhysiques(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SearchFilters) validateMobiliersImages(formats strfmt.Registry) error {
	if swag.IsZero(m.MobiliersImages) { // not required
		return nil
	}

	if m.MobiliersImages != nil {
		if err := m.MobiliersImages.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("mobiliers_images")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("mobiliers_images")
			}
			return err
		}
	}

	return nil
}

func (m *SearchFilters) validateMonumentsLieux(formats strfmt.Registry) error {
	if swag.IsZero(m.MonumentsLieux) { // not required
		return nil
	}

	if m.MonumentsLieux != nil {
		if err := m.MonumentsLieux.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("monuments_lieux")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("monuments_lieux")
			}
			return err
		}
	}

	return nil
}

func (m *SearchFilters) validatePersMorales(formats strfmt.Registry) error {
	if swag.IsZero(m.PersMorales) { // not required
		return nil
	}

	if m.PersMorales != nil {
		if err := m.PersMorales.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("pers_morales")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("pers_morales")
			}
			return err
		}
	}

	return nil
}

func (m *SearchFilters) validatePersPhysiques(formats strfmt.Registry) error {
	if swag.IsZero(m.PersPhysiques) { // not required
		return nil
	}

	if m.PersPhysiques != nil {
		if err := m.PersPhysiques.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("pers_physiques")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("pers_physiques")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this search filters based on the context it is used
func (m *SearchFilters) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateMobiliersImages(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMonumentsLieux(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePersMorales(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePersPhysiques(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SearchFilters) contextValidateMobiliersImages(ctx context.Context, formats strfmt.Registry) error {

	if m.MobiliersImages != nil {

		if swag.IsZero(m.MobiliersImages) { // not required
			return nil
		}

		if err := m.MobiliersImages.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("mobiliers_images")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("mobiliers_images")
			}
			return err
		}
	}

	return nil
}

func (m *SearchFilters) contextValidateMonumentsLieux(ctx context.Context, formats strfmt.Registry) error {

	if m.MonumentsLieux != nil {

		if swag.IsZero(m.MonumentsLieux) { // not required
			return nil
		}

		if err := m.MonumentsLieux.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("monuments_lieux")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("monuments_lieux")
			}
			return err
		}
	}

	return nil
}

func (m *SearchFilters) contextValidatePersMorales(ctx context.Context, formats strfmt.Registry) error {

	if m.PersMorales != nil {

		if swag.IsZero(m.PersMorales) { // not required
			return nil
		}

		if err := m.PersMorales.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("pers_morales")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("pers_morales")
			}
			return err
		}
	}

	return nil
}

func (m *SearchFilters) contextValidatePersPhysiques(ctx context.Context, formats strfmt.Registry) error {

	if m.PersPhysiques != nil {

		if swag.IsZero(m.PersPhysiques) { // not required
			return nil
		}

		if err := m.PersPhysiques.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("pers_physiques")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("pers_physiques")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SearchFilters) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SearchFilters) UnmarshalBinary(b []byte) error {
	var res SearchFilters
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// SearchFiltersMobiliersImages search filters mobiliers images
//
// swagger:model SearchFiltersMobiliersImages
type SearchFiltersMobiliersImages struct {

	// natures
	Natures []int32 `json:"natures"`

	// techniques
	Techniques []int32 `json:"techniques"`

	// states
	States []int32 `json:"states"`

	// materials
	Materials []int32 `json:"materials"`
}

// Validate validates this search filters mobiliers images
func (m *SearchFiltersMobiliersImages) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this search filters mobiliers images based on context it is used
func (m *SearchFiltersMobiliersImages) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *SearchFiltersMobiliersImages) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SearchFiltersMobiliersImages) UnmarshalBinary(b []byte) error {
	var res SearchFiltersMobiliersImages
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// SearchFiltersMonumentsLieux search filters monuments lieux
//
// swagger:model SearchFiltersMonumentsLieux
type SearchFiltersMonumentsLieux struct {

	// natures
	Natures []int32 `json:"natures"`

	// states
	States []int32 `json:"states"`

	// materials
	Materials []int32 `json:"materials"`
}

// Validate validates this search filters monuments lieux
func (m *SearchFiltersMonumentsLieux) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this search filters monuments lieux based on context it is used
func (m *SearchFiltersMonumentsLieux) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *SearchFiltersMonumentsLieux) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SearchFiltersMonumentsLieux) UnmarshalBinary(b []byte) error {
	var res SearchFiltersMonumentsLieux
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// SearchFiltersPersMorales search filters pers morales
//
// swagger:model SearchFiltersPersMorales
type SearchFiltersPersMorales struct {

	// natures
	Natures []int32 `json:"natures"`
}

// Validate validates this search filters pers morales
func (m *SearchFiltersPersMorales) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this search filters pers morales based on context it is used
func (m *SearchFiltersPersMorales) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *SearchFiltersPersMorales) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SearchFiltersPersMorales) UnmarshalBinary(b []byte) error {
	var res SearchFiltersPersMorales
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// SearchFiltersPersPhysiques search filters pers physiques
//
// swagger:model SearchFiltersPersPhysiques
type SearchFiltersPersPhysiques struct {

	// professions
	Professions []int32 `json:"professions"`

	// travels
	Travels []int32 `json:"travels"`
}

// Validate validates this search filters pers physiques
func (m *SearchFiltersPersPhysiques) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this search filters pers physiques based on context it is used
func (m *SearchFiltersPersPhysiques) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *SearchFiltersPersPhysiques) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SearchFiltersPersPhysiques) UnmarshalBinary(b []byte) error {
	var res SearchFiltersPersPhysiques
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
