// Code generated by go-swagger; DO NOT EDIT.

package api

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// MobilierImage mobilier image
//
// swagger:model MobilierImage
type MobilierImage struct {

	// ID of the mobilier image
	ID int32 `json:"id,omitempty"`

	// Title of the mobilier image
	Title string `json:"title,omitempty"`

	// Description of the mobilier image
	Description string `json:"description,omitempty"`

	// History of the mobilier image
	History string `json:"history,omitempty"`

	// bibliography of the mobilier image
	Bibliography string `json:"bibliography,omitempty"`

	// The inscriptions on the object
	Inscriptions string `json:"inscriptions,omitempty"`

	// creation date of the entry
	// Format: date
	CreationDate strfmt.Date `json:"creation_date,omitempty"`

	// update date of the entry
	// Format: date
	UpdateDate strfmt.Date `json:"update_date,omitempty"`

	// is entry published
	Published bool `json:"published,omitempty"`

	// name of the contributors
	Contributors string `json:"contributors,omitempty"`

	// is it protected
	Protected bool `json:"protected,omitempty"`

	// protection comment
	ProtectionComment string `json:"protection_comment,omitempty"`

	// conservation place
	ConservationPlace string `json:"conservation_place,omitempty"`

	// place of origin
	OriginPlace string `json:"origin_place,omitempty"`

	// entry authors
	Authors []string `json:"authors"`

	// city of the mobilier image
	City string `json:"city,omitempty"`

	// department of the mobilier image
	Department string `json:"department,omitempty"`

	// region of the mobilier image
	Region string `json:"region,omitempty"`

	// country of the mobilier image
	Country string `json:"country,omitempty"`

	// conservation states
	Conservation []string `json:"conservation"`

	// materials used for the monument lieu
	Materials []string `json:"materials"`

	// natures of the monument lieu
	Natures []string `json:"natures"`

	// images ID of the monument lieu
	Medias []*Media `json:"medias"`

	// sources
	Sources string `json:"sources,omitempty"`

	// time period of the monument lieu
	Centuries []string `json:"centuries"`

	// techniques
	Techniques []string `json:"techniques"`

	// linked monuments places
	LinkedMonumentsPlaces []int32 `json:"linked_monuments_places"`

	// linked individuals
	LinkedIndividuals []int32 `json:"linked_individuals"`

	// linked legal entities
	LinkedLegalEntities []int32 `json:"linked_legal_entities"`

	// themes
	Themes []string `json:"themes"`
}

// Validate validates this mobilier image
func (m *MobilierImage) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreationDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdateDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMedias(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MobilierImage) validateCreationDate(formats strfmt.Registry) error {
	if swag.IsZero(m.CreationDate) { // not required
		return nil
	}

	if err := validate.FormatOf("creation_date", "body", "date", m.CreationDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *MobilierImage) validateUpdateDate(formats strfmt.Registry) error {
	if swag.IsZero(m.UpdateDate) { // not required
		return nil
	}

	if err := validate.FormatOf("update_date", "body", "date", m.UpdateDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *MobilierImage) validateMedias(formats strfmt.Registry) error {
	if swag.IsZero(m.Medias) { // not required
		return nil
	}

	for i := 0; i < len(m.Medias); i++ {
		if swag.IsZero(m.Medias[i]) { // not required
			continue
		}

		if m.Medias[i] != nil {
			if err := m.Medias[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("medias" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("medias" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this mobilier image based on the context it is used
func (m *MobilierImage) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateMedias(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MobilierImage) contextValidateMedias(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Medias); i++ {

		if m.Medias[i] != nil {

			if swag.IsZero(m.Medias[i]) { // not required
				return nil
			}

			if err := m.Medias[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("medias" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("medias" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *MobilierImage) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MobilierImage) UnmarshalBinary(b []byte) error {
	var res MobilierImage
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
