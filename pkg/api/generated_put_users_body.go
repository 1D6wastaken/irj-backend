// Code generated by go-swagger; DO NOT EDIT.

package api

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PutUsersBody put users body
//
// swagger:model PutUsersBody
type PutUsersBody struct {

	// First name
	// Required: true
	Firstname *string `json:"firstname"`

	// Last name
	// Required: true
	Lastname *string `json:"lastname"`

	// Email of contributor
	// Required: true
	// Format: email
	Mail *strfmt.Email `json:"mail"`

	// Password
	Password string `json:"password,omitempty"`

	// Old password
	OldPassword string `json:"old_password,omitempty"`

	// phone
	// Max Length: 20
	Phone string `json:"phone,omitempty"`

	// organization
	Organization string `json:"organization,omitempty"`

	// domain
	// Required: true
	// Enum: ["ART","ARCHITECTURE","MEDIEVAL","ARCHEOLOGIE","PATRIMOINE","THEOLOGIE","PELERINAGE","AUTRE"]
	Domain *string `json:"domain"`
}

// Validate validates this put users body
func (m *PutUsersBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFirstname(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastname(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMail(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePhone(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDomain(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PutUsersBody) validateFirstname(formats strfmt.Registry) error {

	if err := validate.Required("firstname", "body", m.Firstname); err != nil {
		return err
	}

	return nil
}

func (m *PutUsersBody) validateLastname(formats strfmt.Registry) error {

	if err := validate.Required("lastname", "body", m.Lastname); err != nil {
		return err
	}

	return nil
}

func (m *PutUsersBody) validateMail(formats strfmt.Registry) error {

	if err := validate.Required("mail", "body", m.Mail); err != nil {
		return err
	}

	if err := validate.FormatOf("mail", "body", "email", m.Mail.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *PutUsersBody) validatePhone(formats strfmt.Registry) error {
	if swag.IsZero(m.Phone) { // not required
		return nil
	}

	if err := validate.MaxLength("phone", "body", m.Phone, 20); err != nil {
		return err
	}

	return nil
}

var putUsersBodyTypeDomainPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ART","ARCHITECTURE","MEDIEVAL","ARCHEOLOGIE","PATRIMOINE","THEOLOGIE","PELERINAGE","AUTRE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		putUsersBodyTypeDomainPropEnum = append(putUsersBodyTypeDomainPropEnum, v)
	}
}

const (

	// PutUsersBodyDomainART captures enum value "ART"
	PutUsersBodyDomainART string = "ART"

	// PutUsersBodyDomainARCHITECTURE captures enum value "ARCHITECTURE"
	PutUsersBodyDomainARCHITECTURE string = "ARCHITECTURE"

	// PutUsersBodyDomainMEDIEVAL captures enum value "MEDIEVAL"
	PutUsersBodyDomainMEDIEVAL string = "MEDIEVAL"

	// PutUsersBodyDomainARCHEOLOGIE captures enum value "ARCHEOLOGIE"
	PutUsersBodyDomainARCHEOLOGIE string = "ARCHEOLOGIE"

	// PutUsersBodyDomainPATRIMOINE captures enum value "PATRIMOINE"
	PutUsersBodyDomainPATRIMOINE string = "PATRIMOINE"

	// PutUsersBodyDomainTHEOLOGIE captures enum value "THEOLOGIE"
	PutUsersBodyDomainTHEOLOGIE string = "THEOLOGIE"

	// PutUsersBodyDomainPELERINAGE captures enum value "PELERINAGE"
	PutUsersBodyDomainPELERINAGE string = "PELERINAGE"

	// PutUsersBodyDomainAUTRE captures enum value "AUTRE"
	PutUsersBodyDomainAUTRE string = "AUTRE"
)

// prop value enum
func (m *PutUsersBody) validateDomainEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, putUsersBodyTypeDomainPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *PutUsersBody) validateDomain(formats strfmt.Registry) error {

	if err := validate.Required("domain", "body", m.Domain); err != nil {
		return err
	}

	// value enum
	if err := m.validateDomainEnum("domain", "body", *m.Domain); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this put users body based on context it is used
func (m *PutUsersBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *PutUsersBody) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PutUsersBody) UnmarshalBinary(b []byte) error {
	var res PutUsersBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
