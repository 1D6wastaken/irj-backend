// Code generated by go-swagger; DO NOT EDIT.

package api

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PersonneMorale personne morale
//
// swagger:model PersonneMorale
type PersonneMorale struct {

	// ID of the legal entity
	ID int32 `json:"id,omitempty"`

	// Title of the legal entity
	Title string `json:"title,omitempty"`

	// Has foundation deed
	FoundationDeed bool `json:"foundation_deed,omitempty"`

	// History of the legal entity
	History string `json:"history,omitempty"`

	// bibliography of the legal entity
	Bibliography string `json:"bibliography,omitempty"`

	// Is simple mention
	SimpleMention bool `json:"simple_mention,omitempty"`

	// status text
	StatusText bool `json:"status_text,omitempty"`

	// How it worked
	Process string `json:"process,omitempty"`

	// How it impacted the social life
	SocialInvolvement string `json:"social_involvement,omitempty"`

	// Linked objects
	Objects string `json:"objects,omitempty"`

	// sources of the legal entity
	Sources string `json:"sources,omitempty"`

	// creation date of the entry
	// Format: date
	CreationDate strfmt.Date `json:"creation_date,omitempty"`

	// update date of the entry
	// Format: date
	UpdateDate strfmt.Date `json:"update_date,omitempty"`

	// is entry published
	Published bool `json:"published,omitempty"`

	// name of the contributors
	Contributors string `json:"contributors,omitempty"`

	// comment
	Comment string `json:"comment,omitempty"`

	// entry authors
	Authors []string `json:"authors"`

	// city of the legal entity
	City string `json:"city,omitempty"`

	// department of the legal entity
	Department string `json:"department,omitempty"`

	// region of the legal entity
	Region string `json:"region,omitempty"`

	// country of the legal entity
	Country string `json:"country,omitempty"`

	// natures of the monument lieu
	Natures []string `json:"natures"`

	// images ID of the monument lieu
	Medias []*Media `json:"medias"`

	// time period of the monument lieu
	Centuries []string `json:"centuries"`

	// linked monuments places
	LinkedMonumentsPlaces []int32 `json:"linked_monuments_places"`

	// linked individuals
	LinkedIndividuals []int32 `json:"linked_individuals"`

	// linked furniture images
	LinkedFurnitureImages []int32 `json:"linked_furniture_images"`

	// themes
	Themes []string `json:"themes"`
}

// Validate validates this personne morale
func (m *PersonneMorale) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreationDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdateDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMedias(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PersonneMorale) validateCreationDate(formats strfmt.Registry) error {
	if swag.IsZero(m.CreationDate) { // not required
		return nil
	}

	if err := validate.FormatOf("creation_date", "body", "date", m.CreationDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *PersonneMorale) validateUpdateDate(formats strfmt.Registry) error {
	if swag.IsZero(m.UpdateDate) { // not required
		return nil
	}

	if err := validate.FormatOf("update_date", "body", "date", m.UpdateDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *PersonneMorale) validateMedias(formats strfmt.Registry) error {
	if swag.IsZero(m.Medias) { // not required
		return nil
	}

	for i := 0; i < len(m.Medias); i++ {
		if swag.IsZero(m.Medias[i]) { // not required
			continue
		}

		if m.Medias[i] != nil {
			if err := m.Medias[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("medias" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("medias" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this personne morale based on the context it is used
func (m *PersonneMorale) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateMedias(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PersonneMorale) contextValidateMedias(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Medias); i++ {

		if m.Medias[i] != nil {

			if swag.IsZero(m.Medias[i]) { // not required
				return nil
			}

			if err := m.Medias[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("medias" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("medias" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *PersonneMorale) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PersonneMorale) UnmarshalBinary(b []byte) error {
	var res PersonneMorale
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
