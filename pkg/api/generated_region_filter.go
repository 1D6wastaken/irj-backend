// Code generated by go-swagger; DO NOT EDIT.

package api

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// RegionFilter region filter
//
// swagger:model RegionFilter
type RegionFilter struct {
	BasicFilter

	// pays
	Pays *BasicFilter `json:"pays,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *RegionFilter) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 BasicFilter
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.BasicFilter = aO0

	// now for regular properties
	var propsRegionFilter struct {
		Pays *BasicFilter `json:"pays,omitempty"`
	}
	if err := swag.ReadJSON(raw, &propsRegionFilter); err != nil {
		return err
	}
	m.Pays = propsRegionFilter.Pays

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m RegionFilter) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	aO0, err := swag.WriteJSON(m.BasicFilter)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	// now for regular properties
	var propsRegionFilter struct {
		Pays *BasicFilter `json:"pays,omitempty"`
	}
	propsRegionFilter.Pays = m.Pays

	jsonDataPropsRegionFilter, errRegionFilter := swag.WriteJSON(propsRegionFilter)
	if errRegionFilter != nil {
		return nil, errRegionFilter
	}
	_parts = append(_parts, jsonDataPropsRegionFilter)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this region filter
func (m *RegionFilter) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with BasicFilter
	if err := m.BasicFilter.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePays(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RegionFilter) validatePays(formats strfmt.Registry) error {
	if swag.IsZero(m.Pays) { // not required
		return nil
	}

	if m.Pays != nil {
		if err := m.Pays.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("pays")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("pays")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this region filter based on the context it is used
func (m *RegionFilter) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with BasicFilter
	if err := m.BasicFilter.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePays(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RegionFilter) contextValidatePays(ctx context.Context, formats strfmt.Registry) error {

	if m.Pays != nil {

		if swag.IsZero(m.Pays) { // not required
			return nil
		}

		if err := m.Pays.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("pays")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("pays")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RegionFilter) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RegionFilter) UnmarshalBinary(b []byte) error {
	var res RegionFilter
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
