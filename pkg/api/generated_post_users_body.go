// Code generated by go-swagger; DO NOT EDIT.

package api

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PostUsersBody post users body
//
// swagger:model PostUsersBody
type PostUsersBody struct {

	// First name
	// Required: true
	Firstname *string `json:"firstname"`

	// Last name
	// Required: true
	Lastname *string `json:"lastname"`

	// Email of contributor
	// Required: true
	// Format: email
	Mail *strfmt.Email `json:"mail"`

	// Password
	// Required: true
	// Min Length: 8
	Password *string `json:"password"`

	// phone
	// Max Length: 20
	Phone string `json:"phone,omitempty"`

	// organization
	Organization string `json:"organization,omitempty"`

	// domain
	// Required: true
	// Enum: ["ART","ARCHITECTURE","MEDIEVAL","ARCHEOLOGIE","PATRIMOINE","THEOLOGIE","PELERINAGE","AUTRE"]
	Domain *string `json:"domain"`

	// motivation
	// Required: true
	Motivation *string `json:"motivation"`
}

// Validate validates this post users body
func (m *PostUsersBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFirstname(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastname(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMail(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePassword(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePhone(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDomain(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMotivation(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PostUsersBody) validateFirstname(formats strfmt.Registry) error {

	if err := validate.Required("firstname", "body", m.Firstname); err != nil {
		return err
	}

	return nil
}

func (m *PostUsersBody) validateLastname(formats strfmt.Registry) error {

	if err := validate.Required("lastname", "body", m.Lastname); err != nil {
		return err
	}

	return nil
}

func (m *PostUsersBody) validateMail(formats strfmt.Registry) error {

	if err := validate.Required("mail", "body", m.Mail); err != nil {
		return err
	}

	if err := validate.FormatOf("mail", "body", "email", m.Mail.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *PostUsersBody) validatePassword(formats strfmt.Registry) error {

	if err := validate.Required("password", "body", m.Password); err != nil {
		return err
	}

	if err := validate.MinLength("password", "body", *m.Password, 8); err != nil {
		return err
	}

	return nil
}

func (m *PostUsersBody) validatePhone(formats strfmt.Registry) error {
	if swag.IsZero(m.Phone) { // not required
		return nil
	}

	if err := validate.MaxLength("phone", "body", m.Phone, 20); err != nil {
		return err
	}

	return nil
}

var postUsersBodyTypeDomainPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ART","ARCHITECTURE","MEDIEVAL","ARCHEOLOGIE","PATRIMOINE","THEOLOGIE","PELERINAGE","AUTRE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		postUsersBodyTypeDomainPropEnum = append(postUsersBodyTypeDomainPropEnum, v)
	}
}

const (

	// PostUsersBodyDomainART captures enum value "ART"
	PostUsersBodyDomainART string = "ART"

	// PostUsersBodyDomainARCHITECTURE captures enum value "ARCHITECTURE"
	PostUsersBodyDomainARCHITECTURE string = "ARCHITECTURE"

	// PostUsersBodyDomainMEDIEVAL captures enum value "MEDIEVAL"
	PostUsersBodyDomainMEDIEVAL string = "MEDIEVAL"

	// PostUsersBodyDomainARCHEOLOGIE captures enum value "ARCHEOLOGIE"
	PostUsersBodyDomainARCHEOLOGIE string = "ARCHEOLOGIE"

	// PostUsersBodyDomainPATRIMOINE captures enum value "PATRIMOINE"
	PostUsersBodyDomainPATRIMOINE string = "PATRIMOINE"

	// PostUsersBodyDomainTHEOLOGIE captures enum value "THEOLOGIE"
	PostUsersBodyDomainTHEOLOGIE string = "THEOLOGIE"

	// PostUsersBodyDomainPELERINAGE captures enum value "PELERINAGE"
	PostUsersBodyDomainPELERINAGE string = "PELERINAGE"

	// PostUsersBodyDomainAUTRE captures enum value "AUTRE"
	PostUsersBodyDomainAUTRE string = "AUTRE"
)

// prop value enum
func (m *PostUsersBody) validateDomainEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, postUsersBodyTypeDomainPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *PostUsersBody) validateDomain(formats strfmt.Registry) error {

	if err := validate.Required("domain", "body", m.Domain); err != nil {
		return err
	}

	// value enum
	if err := m.validateDomainEnum("domain", "body", *m.Domain); err != nil {
		return err
	}

	return nil
}

func (m *PostUsersBody) validateMotivation(formats strfmt.Registry) error {

	if err := validate.Required("motivation", "body", m.Motivation); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this post users body based on context it is used
func (m *PostUsersBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *PostUsersBody) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PostUsersBody) UnmarshalBinary(b []byte) error {
	var res PostUsersBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
