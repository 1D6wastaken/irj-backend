// Code generated by go-swagger; DO NOT EDIT.

package api

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// DepartmentFilter department filter
//
// swagger:model DepartmentFilter
type DepartmentFilter struct {
	BasicFilter

	// region
	Region *RegionFilter `json:"region,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *DepartmentFilter) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 BasicFilter
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.BasicFilter = aO0

	// now for regular properties
	var propsDepartmentFilter struct {
		Region *RegionFilter `json:"region,omitempty"`
	}
	if err := swag.ReadJSON(raw, &propsDepartmentFilter); err != nil {
		return err
	}
	m.Region = propsDepartmentFilter.Region

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m DepartmentFilter) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	aO0, err := swag.WriteJSON(m.BasicFilter)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	// now for regular properties
	var propsDepartmentFilter struct {
		Region *RegionFilter `json:"region,omitempty"`
	}
	propsDepartmentFilter.Region = m.Region

	jsonDataPropsDepartmentFilter, errDepartmentFilter := swag.WriteJSON(propsDepartmentFilter)
	if errDepartmentFilter != nil {
		return nil, errDepartmentFilter
	}
	_parts = append(_parts, jsonDataPropsDepartmentFilter)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this department filter
func (m *DepartmentFilter) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with BasicFilter
	if err := m.BasicFilter.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRegion(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DepartmentFilter) validateRegion(formats strfmt.Registry) error {
	if swag.IsZero(m.Region) { // not required
		return nil
	}

	if m.Region != nil {
		if err := m.Region.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("region")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("region")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this department filter based on the context it is used
func (m *DepartmentFilter) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with BasicFilter
	if err := m.BasicFilter.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRegion(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DepartmentFilter) contextValidateRegion(ctx context.Context, formats strfmt.Registry) error {

	if m.Region != nil {

		if swag.IsZero(m.Region) { // not required
			return nil
		}

		if err := m.Region.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("region")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("region")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DepartmentFilter) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DepartmentFilter) UnmarshalBinary(b []byte) error {
	var res DepartmentFilter
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
