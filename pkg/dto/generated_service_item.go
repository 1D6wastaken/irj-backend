// Code generated by go-swagger; DO NOT EDIT.

package dto

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ServiceItem service item
//
// swagger:model ServiceItem
type ServiceItem struct {

	// name
	Name string `json:"name,omitempty"`

	// status
	// Enum: ["OK","KO"]
	Status string `json:"status,omitempty"`

	// details
	Details string `json:"details,omitempty"`
}

// Validate validates this service item
func (m *ServiceItem) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var serviceItemTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["OK","KO"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		serviceItemTypeStatusPropEnum = append(serviceItemTypeStatusPropEnum, v)
	}
}

const (

	// ServiceItemStatusOK captures enum value "OK"
	ServiceItemStatusOK string = "OK"

	// ServiceItemStatusKO captures enum value "KO"
	ServiceItemStatusKO string = "KO"
)

// prop value enum
func (m *ServiceItem) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, serviceItemTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ServiceItem) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this service item based on context it is used
func (m *ServiceItem) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ServiceItem) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ServiceItem) UnmarshalBinary(b []byte) error {
	var res ServiceItem
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
